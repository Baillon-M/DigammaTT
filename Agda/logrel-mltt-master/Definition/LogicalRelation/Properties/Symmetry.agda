{-# OPTIONS --without-K --safe #-}

open import Definition.Typed.EqualityRelation

module Definition.LogicalRelation.Properties.Symmetry {{eqrel : EqRelSet}} where
open EqRelSet {{...}}

open import Definition.Untyped hiding (_‚à∑_)
open import Definition.Typed
open import Definition.Typed.Properties
import Definition.Typed.Weakening as Wk
open import Definition.LogicalRelation
open import Definition.LogicalRelation.ShapeView
open import Definition.LogicalRelation.Irrelevance
open import Definition.LogicalRelation.Properties.Conversion

open import Tools.Nat
open import Tools.Product
import Tools.PropositionalEquality as PE

private
  variable
    n : Nat
    Œì : Con Term n
    l : LCon
    lŒµ : ‚ä¢‚Çó l

mutual
  -- Helper function for symmetry of type equality using shape views.
  symEqT : ‚àÄ {A B k k‚Ä≤} {[A] : Œì / lŒµ ‚ä©‚ü® k ‚ü© A} {[B] : Œì / lŒµ ‚ä©‚ü® k‚Ä≤ ‚ü© B}
         ‚Üí ShapeView Œì k k‚Ä≤ A B [A] [B]
         ‚Üí Œì / lŒµ ‚ä©‚ü® k  ‚ü© A ‚â° B / [A]
         ‚Üí Œì / lŒµ ‚ä©‚ü® k‚Ä≤ ‚ü© B ‚â° A / [B]
  symEqT (‚Ñï·µ• D D‚Ä≤) A‚â°B = red D
  symEqT (ùîπ·µ• D D‚Ä≤) A‚â°B = red D
--  symEqT (Empty·µ• D D‚Ä≤) A‚â°B = red D
--  symEqT (Unit·µ• D D‚Ä≤) A‚â°B = red D
  symEqT (ne (ne K D neK K‚â°K) (ne K‚ÇÅ D‚ÇÅ neK‚ÇÅ K‚â°K‚ÇÅ)) (ne‚Çå M D‚Ä≤ neM K‚â°M)
         rewrite whrDet* (red D‚Ä≤ , ne neM) (red D‚ÇÅ , ne neK‚ÇÅ) =
    ne‚Çå _ D neK
        (~-sym K‚â°M)
  symEqT {Œì = Œì} (B·µ• W (B·µ£ F G D ‚ä¢F ‚ä¢G A‚â°A [F‚Çô] [F] [G] G-ext)
                       (B·µ£ F‚ÇÅ G‚ÇÅ D‚ÇÅ ‚ä¢F‚ÇÅ ‚ä¢G‚ÇÅ A‚â°A‚ÇÅ [F‚Çô]‚ÇÅ [F]‚ÇÅ [G]‚ÇÅ G-ext‚ÇÅ))
         (B‚Çå F‚Ä≤ G‚Ä≤ D‚Ä≤ A‚â°B [F‚â°F‚Çô] [F‚â°F‚Ä≤] [G‚â°G‚Ä≤]) =
    let Œ†F‚ÇÅG‚ÇÅ‚â°Œ†F‚Ä≤G‚Ä≤   = whrDet* (red D‚ÇÅ , ‚ü¶ W ‚üß‚Çô) (D‚Ä≤ , ‚ü¶ W ‚üß‚Çô)
        F‚ÇÅ‚â°F‚Ä≤ , G‚ÇÅ‚â°G‚Ä≤ = B-PE-injectivity W Œ†F‚ÇÅG‚ÇÅ‚â°Œ†F‚Ä≤G‚Ä≤
    in B‚Çå _ _ (red D)
         (‚âÖ-sym
          (PE.subst (Œª x ‚Üí Œì / _ ‚ä¢ ‚ü¶ W ‚üß F ‚ñπ G ‚âÖ x) (PE.sym Œ†F‚ÇÅG‚ÇÅ‚â°Œ†F‚Ä≤G‚Ä≤)
           A‚â°B))
         (max [F‚Çô] [F‚â°F‚Çô])
         (Œª {m} {œÅ} {Œî} [œÅ] ‚â§Œµ lŒµ' N<s N<s' ‚ä¢Œî ‚Üí
           let œÅF‚Ä≤‚â°œÅF‚ÇÅ œÅ = PE.cong (wk œÅ) (PE.sym F‚ÇÅ‚â°F‚Ä≤)
               [œÅF‚Ä≤] {œÅ} [œÅ] ‚ä¢Œî = PE.subst (Œª x ‚Üí Œî / _ ‚ä©‚ü® _ ‚ü© wk œÅ x) F‚ÇÅ‚â°F‚Ä≤ ([F]‚ÇÅ [œÅ] ‚â§Œµ lŒµ' N<s ‚ä¢Œî)
           in irrelevanceEq‚Ä≤ {Œì = Œî} (œÅF‚Ä≤‚â°œÅF‚ÇÅ œÅ)
                             ([œÅF‚Ä≤] [œÅ] ‚ä¢Œî) ([F]‚ÇÅ [œÅ] ‚â§Œµ lŒµ' N<s ‚ä¢Œî)
                             (symEq ([F] [œÅ] ‚â§Œµ lŒµ' (‚â§-trans (MaxLess-l _ _) N<s') ‚ä¢Œî) ([œÅF‚Ä≤] [œÅ] ‚ä¢Œî)
                             ([F‚â°F‚Ä≤] [œÅ] ‚â§Œµ lŒµ' (‚â§-trans (MaxLess-l _ _) N<s') (‚â§-trans (MaxLess-r _ _) N<s') ‚ä¢Œî)))
           Œª {m œÅ Œî} [œÅ] ‚â§Œµ lŒµ' N<s N<s' ‚ä¢Œî [a]‚ÇÅ ‚Üí
             let F‚Çô<s = ‚â§-trans (MaxLess-l _ _) N<s'
                 F‚â°F‚Çô<s = ‚â§-trans (MaxLess-r _ _) N<s'
                 œÅF‚Ä≤‚â°œÅF‚ÇÅ œÅ = PE.cong (wk œÅ) (PE.sym F‚ÇÅ‚â°F‚Ä≤)
                 [œÅF‚Ä≤] {œÅ} [œÅ] ‚ä¢Œî = PE.subst (Œª x ‚Üí Œî / _ ‚ä©‚ü® _ ‚ü© wk œÅ x) F‚ÇÅ‚â°F‚Ä≤ ([F]‚ÇÅ [œÅ] ‚â§Œµ lŒµ' N<s ‚ä¢Œî)
                 [F‚ÇÅ‚â°F] = irrelevanceEq‚Ä≤ {Œì = Œî} (œÅF‚Ä≤‚â°œÅF‚ÇÅ œÅ)
                             ([œÅF‚Ä≤] [œÅ] ‚ä¢Œî) ([F]‚ÇÅ [œÅ] ‚â§Œµ lŒµ' N<s ‚ä¢Œî)
                             (symEq ([F] [œÅ] ‚â§Œµ lŒµ' (‚â§-trans (MaxLess-l _ _) N<s') ‚ä¢Œî) ([œÅF‚Ä≤] [œÅ] ‚ä¢Œî)
                             ([F‚â°F‚Ä≤] [œÅ] ‚â§Œµ lŒµ' (‚â§-trans (MaxLess-l _ _) N<s') (‚â§-trans (MaxLess-r _ _) N<s') ‚ä¢Œî))
                 œÅG‚Ä≤a‚â°œÅG‚ÇÅ‚Ä≤a = PE.cong (Œª x ‚Üí wk (lift œÅ) x [ _ ]) (PE.sym G‚ÇÅ‚â°G‚Ä≤)
                 [a] = convTerm‚ÇÅ ([F]‚ÇÅ [œÅ] ‚â§Œµ lŒµ' N<s ‚ä¢Œî) ([F] [œÅ] ‚â§Œµ lŒµ' F‚Çô<s ‚ä¢Œî) [F‚ÇÅ‚â°F] [a]‚ÇÅ
                 (M , [Ga]) = ([G] [œÅ] ‚â§Œµ lŒµ' F‚Çô<s ‚ä¢Œî [a])
                 (M' , [Ga]') = ([G]‚ÇÅ [œÅ] ‚â§Œµ lŒµ' N<s ‚ä¢Œî [a]‚ÇÅ)
                 (M'' , [G‚â°Ga]) = [G‚â°G‚Ä≤] [œÅ] ‚â§Œµ lŒµ' F‚Çô<s F‚â°F‚Çô<s ‚ä¢Œî [a]
                 Kmax = max M M''
             in Kmax , Œª ‚â§Œµ' lŒµ'' M<s K<s ‚Üí
                let M<s' = ‚â§-trans (MaxLess-l M M'') K<s
                    M<s'' = ‚â§-trans (MaxLess-r M M'') K<s
                    [œÅG‚Ä≤a] = PE.subst (Œª x ‚Üí _ / _ ‚ä©‚ü® _ ‚ü© wk (lift œÅ) x [ _ ]) G‚ÇÅ‚â°G‚Ä≤
                                      ([Ga]' ‚â§Œµ' lŒµ'' M<s)
                in irrelevanceEq‚Ä≤ œÅG‚Ä≤a‚â°œÅG‚ÇÅ‚Ä≤a [œÅG‚Ä≤a] ([Ga]' ‚â§Œµ' lŒµ'' M<s) (symEq ([Ga] ‚â§Œµ' lŒµ'' M<s') [œÅG‚Ä≤a] ([G‚â°Ga] ‚â§Œµ' lŒµ'' M<s' M<s''))
  symEqT (U·µ• (U·µ£ _ _ _) (U·µ£ _ _ _)) A‚â°B = PE.refl
  symEqT (emb‚Å∞¬π x) A‚â°B = symEqT x A‚â°B
  symEqT (emb¬π‚Å∞ x) A‚â°B = symEqT x A‚â°B

  -- Symmetry of type equality.
  symEq : ‚àÄ {A B k k‚Ä≤} ([A] : Œì / lŒµ ‚ä©‚ü® k ‚ü© A) ([B] : Œì / lŒµ ‚ä©‚ü® k‚Ä≤ ‚ü© B)
        ‚Üí Œì / lŒµ ‚ä©‚ü® k ‚ü© A ‚â° B / [A]
        ‚Üí Œì / lŒµ ‚ä©‚ü® k‚Ä≤ ‚ü© B ‚â° A / [B]
  symEq [A] [B] A‚â°B = symEqT (goodCases [A] [B] A‚â°B) A‚â°B

symNeutralTerm : ‚àÄ {t u A}
               ‚Üí Œì / lŒµ ‚ä©neNf t ‚â° u ‚à∑ A
               ‚Üí Œì / lŒµ ‚ä©neNf u ‚â° t ‚à∑ A
symNeutralTerm (neNf‚Çú‚Çå neK neM k‚â°m) = neNf‚Çú‚Çå neM neK (~-sym k‚â°m)

symNatural-prop : ‚àÄ {k k‚Ä≤}
                ‚Üí [Natural]-prop Œì lŒµ k k‚Ä≤
                ‚Üí [Natural]-prop Œì lŒµ k‚Ä≤ k
symNatural-prop (suc·µ£ (‚Ñï‚Çú‚Çå k k‚Ä≤ d d‚Ä≤ t‚â°u prop)) =
  suc·µ£ (‚Ñï‚Çú‚Çå k‚Ä≤ k d‚Ä≤ d (‚âÖ‚Çú-sym t‚â°u) (symNatural-prop prop))
symNatural-prop zero·µ£ = zero·µ£
symNatural-prop (ne prop) = ne (symNeutralTerm prop)

symBoolean-prop : ‚àÄ {k k‚Ä≤}
                ‚Üí [Boolean]-prop Œì lŒµ k k‚Ä≤
                ‚Üí [Boolean]-prop Œì lŒµ k‚Ä≤ k
symBoolean-prop true·µ£ = true·µ£
symBoolean-prop false·µ£ = false·µ£
symBoolean-prop (ne prop) = ne (symNeutralTerm prop)

-- symEmpty-prop : ‚àÄ {k k‚Ä≤}
--               ‚Üí [Empty]-prop Œì k k‚Ä≤
--               ‚Üí [Empty]-prop Œì k‚Ä≤ k
-- symEmpty-prop (ne prop) = ne (symNeutralTerm prop)

-- Symmetry of term equality.
symEqTerm : ‚àÄ {k A t u} ([A] : Œì / lŒµ ‚ä©‚ü® k ‚ü© A)
          ‚Üí Œì / lŒµ ‚ä©‚ü® k ‚ü© t ‚â° u ‚à∑ A / [A]
          ‚Üí Œì / lŒµ ‚ä©‚ü® k ‚ü© u ‚â° t ‚à∑ A / [A]
symEqTerm (U·µ£‚Ä≤ .‚Å∞ 0<1 ‚ä¢Œì) (U‚Çú‚Çå A B A‚â°B [A] [B] [A‚â°B]) =
  U‚Çú‚Çå B A (‚âÖ‚Çú-sym A‚â°B) [B] [A] (symEq [A] [B] [A‚â°B])
symEqTerm (‚Ñï·µ£ D) (‚Ñï‚Çú‚Çå k k‚Ä≤ d d‚Ä≤ t‚â°u prop) =
  ‚Ñï‚Çú‚Çå k‚Ä≤ k d‚Ä≤ d (‚âÖ‚Çú-sym t‚â°u) (symNatural-prop prop)
symEqTerm (ùîπ·µ£ D) (ùîπ‚Çú‚Çå k k‚Ä≤ d d‚Ä≤ t‚â°u prop) =
  ùîπ‚Çú‚Çå k‚Ä≤ k d‚Ä≤ d (‚âÖ‚Çú-sym t‚â°u) (symBoolean-prop prop) --(symNatural-prop prop)
-- symEqTerm (Empty·µ£ D) (Empty‚Çú‚Çå k k‚Ä≤ d d‚Ä≤ t‚â°u prop) =
--   Empty‚Çú‚Çå k‚Ä≤ k d‚Ä≤ d (‚âÖ‚Çú-sym t‚â°u) (symEmpty-prop prop)
-- symEqTerm (Unit·µ£ D) (Unit‚Çú‚Çå ‚ä¢t ‚ä¢u) =
--   Unit‚Çú‚Çå ‚ä¢u ‚ä¢t
symEqTerm (ne‚Ä≤ K D neK K‚â°K) (ne‚Çú‚Çå k m d d‚Ä≤ nf) =
  ne‚Çú‚Çå m k d‚Ä≤ d (symNeutralTerm nf)
symEqTerm (B·µ£‚Ä≤ BŒ† F G D ‚ä¢F ‚ä¢G A‚â°A [F]‚Çô [F] [G] G-ext)
          (Œ†‚Çú‚Çå f‚â°g [f] [g] N [f‚â°g]) =
  Œ†‚Çú‚Çå (‚âÖ‚Çú-sym f‚â°g) [g] [f] N
      (Œª {m} {œÅ} {Œî} {a} [œÅ] ‚â§Œµ lŒµ' N<s N<s' ‚ä¢Œî [a] ‚Üí
        let (M , [f‚â°ga]) = [f‚â°g] [œÅ] ‚â§Œµ lŒµ' N<s N<s' ‚ä¢Œî [a]
            (M' , [Ga]) = [G] [œÅ] ‚â§Œµ lŒµ' N<s ‚ä¢Œî [a]
        in M , (Œª ‚â§Œµ' lŒµ'' M<s M<s' ‚Üí symEqTerm ([Ga] ‚â§Œµ' lŒµ'' M<s) ([f‚â°ga] ‚â§Œµ' lŒµ'' M<s M<s')))
symEqTerm (B·µ£‚Ä≤ BŒ£ F G D ‚ä¢F ‚ä¢G A‚â°A [F]‚Çô [F] [G] G-ext)
          (Œ£‚Çú‚Çå  p r d d‚Ä≤ pProd rProd p‚âÖr [t] [u] N [prop‚â°]) =
  let ‚ä¢Œì = wf ‚ä¢F
      -- [Gfstp‚â°Gfstr] = G-ext Wk.id ‚ä¢Œì [fstp] [fstr] [fst‚â°]
  in  Œ£‚Çú‚Çå r p d‚Ä≤ d rProd pProd (‚âÖ‚Çú-sym p‚âÖr) [u] [t] N
          (Œª ‚â§Œµ lŒµ' N<s N<s' ‚Üí
            let ([fstp] , [fstr] , [fst‚â°] , K , [snd‚â°]) = [prop‚â°] ‚â§Œµ lŒµ' N<s N<s'
                M , [Gfstp] = [G] Wk.id ‚â§Œµ lŒµ' N<s (Con‚â§ ‚â§Œµ ‚ä¢Œì) [fstp]
                M' , [Gfstr] = [G] Wk.id ‚â§Œµ lŒµ' N<s (Con‚â§ ‚â§Œµ ‚ä¢Œì) [fstr]
                [Gfstp‚â°Gfstr] = G-ext Wk.id ‚â§Œµ lŒµ' N<s (Con‚â§ ‚â§Œµ ‚ä¢Œì) [fstp] [fstr] [fst‚â°]
                Kmax = max M K
            in [fstr] , [fstp] , symEqTerm ([F] Wk.id ‚â§Œµ lŒµ' N<s _) [fst‚â°] , Kmax ,
               Œª ‚â§Œµ' lŒµ'' M<s K<s ‚Üí
                let M<s' = (‚â§-trans (MaxLess-l _ _) K<s)
                    K<s' = (‚â§-trans (MaxLess-r _ _) K<s)
                    [[Gfstp]] = ([Gfstp] ‚â§Œµ' lŒµ'' M<s')
                    [[Gfstp‚â°Gfstr]] = [Gfstp‚â°Gfstr] ‚â§Œµ' lŒµ'' M<s'
                in convEqTerm‚ÇÅ [[Gfstp]] ([Gfstr] ‚â§Œµ' lŒµ'' M<s) [[Gfstp‚â°Gfstr]]
                               (symEqTerm [[Gfstp]] ([snd‚â°] ‚â§Œµ' lŒµ'' M<s' K<s')))
symEqTerm (emb 0<1 x) t‚â°u = symEqTerm x t‚â°u
