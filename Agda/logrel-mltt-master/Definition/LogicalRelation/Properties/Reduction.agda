{-# OPTIONS --without-K --safe #-}

open import Definition.Typed.EqualityRelation

module Definition.LogicalRelation.Properties.Reduction {{eqrel : EqRelSet}} where
open EqRelSet {{...}}

open import Definition.Untyped using (LCon ; ‚ä¢‚Çó_ ; Con ; Term ; ùîπ ; ‚Ñï)
open import Definition.Typed
open import Definition.Typed.Properties
import Definition.Typed.Weakening as Wk
open import Definition.Typed.RedSteps
open import Definition.LogicalRelation
open import Definition.LogicalRelation.Properties.Reflexivity
open import Definition.LogicalRelation.Properties.Universe
open import Definition.LogicalRelation.Properties.Escape

open import Tools.Nat
open import Tools.Product
import Tools.PropositionalEquality as PE

private
  variable
    n : Nat
    Œì : Con Term n
    l : LCon
    lŒµ : ‚ä¢‚Çó l

-- Weak head expansion of reducible types.
redSubst* : ‚àÄ {A B k}
          ‚Üí Œì / lŒµ ‚ä¢ A ‚áí* B
          ‚Üí Œì / lŒµ ‚ä©‚ü® k ‚ü© B
          ‚Üí ‚àÉ Œª ([A] : Œì / lŒµ ‚ä©‚ü® k ‚ü© A)
          ‚Üí Œì / lŒµ ‚ä©‚ü® k ‚ü© A ‚â° B / [A]
redSubst* D (U·µ£‚Ä≤ l‚Ä≤ l< ‚ä¢Œì) rewrite redU* D =
  U·µ£‚Ä≤ l‚Ä≤ l< ‚ä¢Œì , ‚ä©¬π‚â°U (U·µ£ l‚Ä≤ l< ‚ä¢Œì) PE.refl
redSubst* D (‚Ñï·µ£ [ ‚ä¢B , ‚ä¢‚Ñï , D‚Ä≤ ]) =
  let ‚ä¢A = redFirst* D
  in  ‚Ñï·µ£ ([ ‚ä¢A , ‚ä¢‚Ñï , D ‚á®* D‚Ä≤ ]) , ‚ä©¬π‚â°‚Ñï _ D‚Ä≤
redSubst* D (ùîπ·µ£ [ ‚ä¢B , ‚ä¢ùîπ , D‚Ä≤ ]) =
  let ‚ä¢A = redFirst* D
  in  ùîπ·µ£ ([ ‚ä¢A , ‚ä¢ùîπ , D ‚á®* D‚Ä≤ ]) , ‚ä©¬π‚â°ùîπ _ D‚Ä≤
-- redSubst* D (Empty·µ£ [ ‚ä¢B , ‚ä¢Empty , D‚Ä≤ ]) =
--  let ‚ä¢A = redFirst* D
--  in  Empty·µ£ ([ ‚ä¢A , ‚ä¢Empty , D ‚á®* D‚Ä≤ ]) , D‚Ä≤
--redSubst* D (Unit·µ£ [ ‚ä¢B , ‚ä¢Unit , D‚Ä≤ ]) =
--  let ‚ä¢A = redFirst* D
--  in  Unit·µ£ ([ ‚ä¢A , ‚ä¢Unit , D ‚á®* D‚Ä≤ ]) , D‚Ä≤
redSubst* D (ne‚Ä≤ K [ ‚ä¢B , ‚ä¢K , D‚Ä≤ ] neK K‚â°K) =
  let ‚ä¢A = redFirst* D
  in  (ne‚Ä≤ K [ ‚ä¢A , ‚ä¢K , D ‚á®* D‚Ä≤ ] neK K‚â°K)
  ,   ‚ä©¬π‚â°ne _ (ne‚Çå _ [ ‚ä¢B , ‚ä¢K , D‚Ä≤ ] neK K‚â°K)
redSubst* D (B·µ£‚Ä≤ W F G [ ‚ä¢B , ‚ä¢Œ†FG , D‚Ä≤ ] ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext) =
  let ‚ä¢A = redFirst* D
  in  (B·µ£‚Ä≤ W F G [ ‚ä¢A , ‚ä¢Œ†FG , D ‚á®* D‚Ä≤ ] ‚ä¢F ‚ä¢G A‚â°A (Œª {m} {l'} {‚â§Œµ} ‚Üí [F] {_} {_} {‚â§Œµ}) [G] G-ext)
  ,   ‚ä©¬π‚â°B W _ (B‚Çå _ _ D‚Ä≤ A‚â°A (Œª œÅ ‚ä¢Œî ‚Üí reflEq ([F] œÅ ‚ä¢Œî)) Œª œÅ ‚ä¢Œî [a] ‚Üí reflEq ([G] œÅ ‚ä¢Œî [a]))
redSubst* D (emb 0<1 x) with redSubst* D x
redSubst* D (emb 0<1 x) | y , y‚ÇÅ = emb 0<1 y , ‚ä©¬π‚â°emb _ _ y‚ÇÅ
redSubst* D (œù·µ£ mŒµ B‚áíB' Œ±B' tB fB) =
  let tA , tA‚â°B = redSubst* (œÑRed* D) tB
      fA , fA‚â°B = redSubst* (œÑRed* D) fB
      D' = :‚áí:*-comp [ redFirst* D , ‚ä¢A-red B‚áíB' , D ] B‚áíB'
    in
    (œù·µ£ mŒµ D' Œ±B' tA fA , ‚ä©¬π‚â°œù-l D' Œ±B' tA fA tA‚â°B fA‚â°B)

-- Weak head expansion of reducible terms.
redSubst*Term‚Ñï : ‚àÄ {t u}
              ‚Üí Œì / lŒµ ‚ä¢ t ‚áí* u ‚à∑ ‚Ñï
              ‚Üí Œì / lŒµ ‚ä©‚Ñï u ‚à∑‚Ñï
              ‚Üí (Œì / lŒµ ‚ä©‚Ñï t ‚à∑‚Ñï)
                √ó Œì / lŒµ ‚ä©‚Ñï t ‚â° u ‚à∑‚Ñï
redSubst*Term‚Ñï t‚áíu (‚Ñï‚Çú n [ ‚ä¢u , ‚ä¢n , d ] n‚â°n prop) =
  let ‚ä¢t   = redFirst*Term t‚áíu
  in
  ‚Ñï‚Çú n [ ‚ä¢t , ‚ä¢n , t‚áíu ‚á®‚à∑* d ] n‚â°n prop
  ,   ‚Ñï‚Çú‚Çå n n [ ‚ä¢t , ‚ä¢n , t‚áíu ‚á®‚à∑* d ] [ ‚ä¢u , ‚ä¢n , d ]
          n‚â°n (reflNatural-prop prop)
redSubst*Term‚Ñï t‚áíu (‚Ñïœù tu fu) =
  let tt , tt‚â°u = redSubst*Term‚Ñï (œÑRed*Term t‚áíu) tu
      ft , ft‚â°u = redSubst*Term‚Ñï (œÑRed*Term t‚áíu) fu
  in ‚Ñïœù tt ft , ‚Ñï‚Çåœù tt‚â°u ft‚â°u


redSubst*Termùîπ : ‚àÄ {t u}
              ‚Üí Œì / lŒµ ‚ä¢ t ‚áí* u ‚à∑ ùîπ
              ‚Üí Œì / lŒµ ‚ä©ùîπ u ‚à∑ùîπ
              ‚Üí (Œì / lŒµ ‚ä©ùîπ t ‚à∑ùîπ)
                √ó Œì / lŒµ ‚ä©ùîπ t ‚â° u ‚à∑ùîπ
redSubst*Termùîπ t‚áíu (ùîπ‚Çú n [ ‚ä¢u , ‚ä¢n , d ] n‚â°n prop) =
  let ‚ä¢t   = redFirst*Term t‚áíu
  in
  ùîπ‚Çú n [ ‚ä¢t , ‚ä¢n , t‚áíu ‚á®‚à∑* d ] n‚â°n prop
  ,   ùîπ‚Çú‚Çå n n [ ‚ä¢t , ‚ä¢n , t‚áíu ‚á®‚à∑* d ] [ ‚ä¢u , ‚ä¢n , d ]
          n‚â°n (reflBoolean-prop prop)
redSubst*Termùîπ t‚áíu (ùîπœù tu fu) =
  let tt , tt‚â°u = redSubst*Termùîπ (œÑRed*Term t‚áíu) tu
      ft , ft‚â°u = redSubst*Termùîπ (œÑRed*Term t‚áíu) fu
  in ùîπœù tt ft , ùîπ‚Çåœù tt‚â°u ft‚â°u


redSubst*TermNe : ‚àÄ {A t u} (neA : Œì / lŒµ ‚ä©ne A)
              ‚Üí Œì / lŒµ ‚ä¢ t ‚áí* u ‚à∑ A
              ‚Üí Œì / lŒµ ‚ä©ne u ‚à∑ A / neA
              ‚Üí (Œì / lŒµ ‚ä©ne t ‚à∑ A / neA)
                √ó (Œì / lŒµ ‚ä©ne t ‚â° u ‚à∑ A / neA)
redSubst*TermNe (ne K D neK K‚â°K) t‚áíu (ne‚Çú k [ ‚ä¢t , ‚ä¢u , d ] (neNf‚Çú neK‚ÇÅ ‚ä¢k k‚â°k)) =
  let A‚â°K  = subset* (red D)
      [d]  = [ ‚ä¢t , ‚ä¢u , d ]
      [d‚Ä≤] = [ conv (redFirst*Term t‚áíu) A‚â°K , ‚ä¢u , conv* t‚áíu A‚â°K ‚á®‚à∑* d ]
  in  ne‚Çú k [d‚Ä≤] (neNf‚Çú neK‚ÇÅ ‚ä¢k k‚â°k) , ne‚Çú‚Çå k k [d‚Ä≤] [d] (neNf‚Çú‚Çå neK‚ÇÅ neK‚ÇÅ k‚â°k)
redSubst*TermNe (ne K D neK K‚â°K) t‚áíu (neœù tu fu) = 
  let tt , tt‚â°u = redSubst*TermNe _ (œÑRed*Term t‚áíu) tu
      ft , ft‚â°u = redSubst*TermNe _ (œÑRed*Term t‚áíu) fu
  in neœù tt ft , ne‚Çåœù tt‚â°u ft‚â°u

redSubst*Term : ‚àÄ {A t u k}
              ‚Üí Œì / lŒµ ‚ä¢ t ‚áí* u ‚à∑ A
              ‚Üí ([A] : Œì / lŒµ ‚ä©‚ü® k ‚ü© A)
              ‚Üí Œì / lŒµ ‚ä©‚ü® k ‚ü© u ‚à∑ A / [A]
              ‚Üí (Œì / lŒµ ‚ä©‚ü® k ‚ü© t ‚à∑ A / [A])
              √ó (Œì / lŒµ ‚ä©‚ü® k ‚ü© t ‚â° u ‚à∑ A / [A])
redSubst*Term t‚áíu (U·µ£‚Ä≤ .‚Å∞ 0<1 ‚ä¢Œì) (U‚Çú A [ ‚ä¢t , ‚ä¢u , d ] typeA A‚â°A [u]) =
  let [d]  = [ ‚ä¢t , ‚ä¢u , d ]
      [d‚Ä≤] = [ redFirst*Term t‚áíu , ‚ä¢u , t‚áíu ‚á®‚à∑* d ]
      q = redSubst* (univ* t‚áíu) (univEq (U·µ£‚Ä≤ ‚Å∞ 0<1 ‚ä¢Œì) (U‚Çú A [d] typeA A‚â°A [u]))
  in U‚Çú A [d‚Ä≤] typeA A‚â°A (proj‚ÇÅ q)
  ,  U‚Çú‚Çå A A [d‚Ä≤] [d] typeA typeA A‚â°A (proj‚ÇÅ q) [u] (proj‚ÇÇ q)
redSubst*Term t‚áíu (‚Ñï·µ£ D) ‚ä¢u =
  let A‚â°‚Ñï  = subset* (red D)
      t‚áíu‚Ä≤ = conv* t‚áíu A‚â°‚Ñï
  in redSubst*Term‚Ñï t‚áíu‚Ä≤ ‚ä¢u
redSubst*Term t‚áíu (ùîπ·µ£ D) ‚ä¢u =
  let A‚â°‚Ñï  = subset* (red D)
      t‚áíu‚Ä≤ = conv* t‚áíu A‚â°‚Ñï
  in redSubst*Termùîπ t‚áíu‚Ä≤ ‚ä¢u
--redSubst*Term t‚áíu (Empty·µ£ D) (Empty‚Çú n [ ‚ä¢u , ‚ä¢n , d ] n‚â°n prop) =
--  let A‚â°Empty  = subset* (red D)
--      ‚ä¢t   = conv (redFirst*Term t‚áíu) A‚â°Empty
--      t‚áíu‚Ä≤ = conv* t‚áíu A‚â°Empty
--  in  Empty‚Çú n [ ‚ä¢t , ‚ä¢n , t‚áíu‚Ä≤ ‚á®‚à∑* d ] n‚â°n prop
--  ,   Empty‚Çú‚Çå n n [ ‚ä¢t , ‚ä¢n , t‚áíu‚Ä≤ ‚á®‚à∑* d ] [ ‚ä¢u , ‚ä¢n , d ]
--          n‚â°n (reflEmpty-prop prop)
--redSubst*Term t‚áíu (Unit·µ£ D) (Unit‚Çú n [ ‚ä¢u , ‚ä¢n , d ] prop) =
--  let A‚â°Unit  = subset* (red D)
--      ‚ä¢t   = conv (redFirst*Term t‚áíu) A‚â°Unit
--      t‚áíu‚Ä≤ = conv* t‚áíu A‚â°Unit
--  in  Unit‚Çú n [ ‚ä¢t , ‚ä¢n , t‚áíu‚Ä≤ ‚á®‚à∑* d ] prop
--  ,   Unit‚Çú‚Çå ‚ä¢t ‚ä¢u
redSubst*Term t‚áíu (ne neA) net = redSubst*TermNe neA t‚áíu net
redSubst*Term {Œì = Œì} {A = A} {t = t} {u = u} {k = k} t‚áíu [A]@(Œ†·µ£‚Ä≤ F G D ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext)
                  [u]@(Œ†‚Çú ‚ä¢f f‚â°f [f] [f]‚ÇÅ) =
  let A‚â°Œ†FG = subset* (red D)
      t‚áíu‚Ä≤  = conv* t‚áíu A‚â°Œ†FG
      [u‚Ä≤] = Œ†‚Çú (redFirst*Term t‚áíu‚Ä≤)
                (‚âÖ‚Çú-red‚ÇÇ (id (‚ä¢B-red D)) t‚áíu‚Ä≤ t‚áíu‚Ä≤ f‚â°f)
                         (Œª {_} {_} {_} {_} {_} {_} {‚â§Œµ} [œÅ] ‚ä¢Œî [a] [b] [a‚â°b]
                           ‚Üí let ua‚â°ub = [f] [œÅ] ‚ä¢Œî [a] [b] [a‚â°b]
                                 ‚ä¢ta , ta‚â°ua = redSubst*Term {k = k} (app-subst* (Wk.wkRed*Term [œÅ] ‚ä¢Œî (RedTerm‚â§* ‚â§Œµ t‚áíu‚Ä≤)) (escapeTerm ([F] [œÅ] ‚ä¢Œî) [a])) ([G] [œÅ] ‚ä¢Œî [a]) ([f]‚ÇÅ [œÅ] ‚ä¢Œî [a])
                             in {!!}) {!!} --[f] [f]‚ÇÅ
  in  [u‚Ä≤]
  ,   Œ†‚Çú‚Çå {!!} [u‚Ä≤] [u]
          (Œª [œÅ] ‚ä¢Œî [a] ‚Üí {!!}) -- reflEqTerm ([G] [œÅ] ‚ä¢Œî [a]) ([f]‚ÇÅ [œÅ] ‚ä¢Œî [a]))
redSubst*Term {Œì = Œì} {A = A} {t = t} {u = u} {k = k} t‚áíu (Œ£·µ£‚Ä≤ F G D ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext)
                  [u]@(Œ£‚Çú p [d]@([ ‚ä¢t , ‚ä¢u , d ]) pProd p‚âÖp [fst] [snd]) =
  let A‚â°Œ£FG = subset* (red D)
      t‚áíu‚Ä≤  = conv* t‚áíu A‚â°Œ£FG
      [d‚Ä≤] = [ conv (redFirst*Term t‚áíu) A‚â°Œ£FG , ‚ä¢u , conv* t‚áíu A‚â°Œ£FG ‚á®‚à∑* d ]
      [u‚Ä≤] = Œ£‚Çú p [d‚Ä≤] pProd p‚âÖp [fst] [snd]
  in  [u‚Ä≤]
  ,   Œ£‚Çú‚Çå p p [d‚Ä≤] [d] pProd pProd p‚âÖp [u‚Ä≤] [u] [fst] [fst]
          (reflEqTerm ([F] Wk.id (wf ‚ä¢F)) [fst])
          (reflEqTerm ([G] Wk.id (wf ‚ä¢F) [fst]) [snd])
redSubst*Term t‚áíu (emb 0<1 x) [u] = redSubst*Term t‚áíu x [u]
redSubst*Term t‚áíu (œù·µ£ mŒµ A‚áíB Œ±B tA fA) (tu , fu) =
  let tt , tt‚â°u = redSubst*Term (œÑRed*Term t‚áíu) tA tu
      ft , ft‚â°u = redSubst*Term (œÑRed*Term t‚áíu) fA fu
  in (tt , ft) , (tt‚â°u , ft‚â°u)

-- Weak head expansion of reducible types with single reduction step.
redSubst : ‚àÄ {A B k}
         ‚Üí Œì / lŒµ ‚ä¢ A ‚áí B
         ‚Üí Œì / lŒµ ‚ä©‚ü® k ‚ü© B
         ‚Üí ‚àÉ Œª ([A] : Œì / lŒµ ‚ä©‚ü® k ‚ü© A)
         ‚Üí Œì / lŒµ ‚ä©‚ü® k ‚ü© A ‚â° B / [A]
redSubst A‚áíB [B] = redSubst* (A‚áíB ‚á® id (escape [B])) [B]

-- Weak head expansion of reducible terms with single reduction step.
redSubstTerm : ‚àÄ {A t u k}
             ‚Üí Œì / lŒµ ‚ä¢ t ‚áí u ‚à∑ A
             ‚Üí ([A] : Œì / lŒµ ‚ä©‚ü® k ‚ü© A)
             ‚Üí Œì / lŒµ ‚ä©‚ü® k ‚ü© u ‚à∑ A / [A]
             ‚Üí Œì / lŒµ ‚ä©‚ü® k ‚ü© t ‚à∑ A / [A]
             √ó Œì / lŒµ ‚ä©‚ü® k ‚ü© t ‚â° u ‚à∑ A / [A]
redSubstTerm t‚áíu [A] [u] = redSubst*Term (t‚áíu ‚á® id (escapeTerm [A] [u])) [A] [u]
