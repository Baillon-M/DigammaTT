{-# OPTIONS --without-K --safe #-}

open import Definition.Typed.EqualityRelation

module Definition.LogicalRelation.Properties.Escape {{eqrel : EqRelSet}} where
open EqRelSet {{...}}

open import Definition.Untyped hiding (_‚à∑_)
open import Definition.Typed
open import Definition.Typed.Weakening
open import Definition.Typed.Properties
open import Definition.LogicalRelation

open import Tools.Nat
open import Tools.Product
import Tools.Sum as TS
import Tools.PropositionalEquality as PE

private
  variable
    n : Nat
    Œì : Con Term n
    l : LCon
    lŒµ : ‚ä¢‚Çó l



-- ConvLog-œù : ‚àÄ {A B k k' k'' n nŒµ} {[A]t [A]f} [A]
--                          ‚Üí Œì / ‚ä¢‚Çó‚Ä¢ l lŒµ n Btrue nŒµ ‚ä©‚ü® k ‚ü© A ‚â° B / [A]t
--                          ‚Üí Œì / ‚ä¢‚Çó‚Ä¢ l lŒµ n Bfalse nŒµ ‚ä©‚ü® k' ‚ü© A ‚â° B / [A]f
--                          ‚Üí  Œì / lŒµ ‚ä©‚ü® k'' ‚ü© A ‚â° B / [A]
-- ConvLog-œù (‚Ñï·µ£ D) tAB fAB = œù‚ä©‚Ñï‚â° {!!} {!!} {!!} {!!} {!!}
-- ConvLog-œù (U·µ£ x‚ÇÇ) x x‚ÇÅ
-- ConvLog-œù (ùîπ·µ£ x‚ÇÇ) x x‚ÇÅ
-- ConvLog-œù (ne x‚ÇÇ) x x‚ÇÅ
-- ConvLog-œù (B·µ£ W x‚ÇÇ) x x‚ÇÅ
-- ConvLog-œù (emb j< [A]) x x‚ÇÅ
-- ConvLog-œù (œù·µ£ mŒµ x‚ÇÇ x‚ÇÉ [A] [A]‚ÇÅ) x x‚ÇÅ

TyLog‚â§ : ‚àÄ {l l' : LCon} {lŒµ : ‚ä¢‚Çó l} {lŒµ' : ‚ä¢‚Çó l'} (‚â§Œµ : l ‚â§‚Çó l') {k A}
           ‚Üí ([A] :  Œì / lŒµ ‚ä©‚ü® k ‚ü© A) ‚Üí Œì / lŒµ' ‚ä©‚ü® k ‚ü© A
TyLog‚â§ f< (U·µ£‚Ä≤ k‚Ä≤ k< ‚ä¢Œì) = U·µ£‚Ä≤ k‚Ä≤ k<  (Con‚â§ f< ‚ä¢Œì)
TyLog‚â§ f< (‚Ñï·µ£ [ ‚ä¢A , ‚ä¢‚Ñï , D ]) = ‚Ñï·µ£ ([ Ty‚â§ f< ‚ä¢A , Ty‚â§ f< ‚ä¢‚Ñï , Red‚â§* f< D ])
TyLog‚â§ f< (ùîπ·µ£ [ ‚ä¢A , ‚ä¢ùîπ , D ]) = ùîπ·µ£ ([ Ty‚â§ f< ‚ä¢A , Ty‚â§ f< ‚ä¢ùîπ , Red‚â§* f< D ])
-- TyLog‚â§ f< (Empty·µ£ [ ‚ä¢A , ‚ä¢Empty , D ]) = Empty·µ£ ([ Ty‚â§ f< ‚ä¢A , Ty‚â§ f< ‚ä¢Empty , Red‚â§* f< D ])
-- TyLog‚â§ f< (Unit·µ£ [ ‚ä¢A , ‚ä¢Unit , D ]) = Unit·µ£ ([ Ty‚â§ f< ‚ä¢A , Ty‚â§ f< ‚ä¢Unit , Red‚â§* f< D ])
TyLog‚â§ f< (ne (ne K [ ‚ä¢A , ‚ä¢K , D ] neK K‚â°K)) = ne (ne K ([ Ty‚â§ f< ‚ä¢A , Ty‚â§ f< ‚ä¢K , Red‚â§* f< D ]) neK (~-‚â§ f< K‚â°K))
TyLog‚â§ {l = l} {l' = l'} f< (B·µ£ W (B·µ£ F G [ ‚ä¢A , ‚ä¢Œ† , D ] ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext)) =
  B·µ£ W (B·µ£ F G ([ Ty‚â§ f< ‚ä¢A , Ty‚â§ f< ‚ä¢Œ† , Red‚â§* f< D ]) (Ty‚â§ f< ‚ä¢F) (Ty‚â§ f< ‚ä¢G) (‚âÖ-‚â§ f< A‚â°A)
    (Œª {m} {œÅ} {Œî} [œÅ] ‚Üí let N , [F]' = [F] [œÅ] in N , Œª ‚â§Œµ lŒµ'' N<s ‚ä¢Œî ‚Üí [F]' (‚â§‚Çó-‚Ä¢ f< ‚â§Œµ) lŒµ'' N<s ‚ä¢Œî)
    (Œª [œÅ] ‚â§Œµ lŒµ'' N<s ‚ä¢Œî [a] ‚Üí [G] [œÅ] (‚â§‚Çó-‚Ä¢ f< ‚â§Œµ) lŒµ'' N<s ‚ä¢Œî [a])
    Œª [œÅ] ‚â§Œµ lŒµ'' N<s ‚ä¢Œî [a] [b] a‚â°b ‚â§Œµ' lŒµ''' M<s ‚Üí G-ext [œÅ] (‚â§‚Çó-‚Ä¢ f< ‚â§Œµ) lŒµ'' N<s ‚ä¢Œî [a] [b] a‚â°b ‚â§Œµ' lŒµ''' M<s) --[F]
    -- (Œª {m} {œÅ} {Œî} {a} {l'} {‚â§Œµ} ‚Üí [G] {_} {_} {_} {_} {_} {Œª n b inl ‚Üí ‚â§Œµ n b (f< n b inl)}) G-ext)
TyLog‚â§ f< (emb {l} {lŒµ} {A}  0<1 [A]) = emb 0<1 (TyLog‚â§ f< [A])

œÑTyLog : ‚àÄ {l : LCon} {lŒµ : ‚ä¢‚Çó l} {n b nŒµ k A}
           ‚Üí ([A] :  Œì / lŒµ ‚ä©‚ü® k ‚ü© A)
           ‚Üí Œì / ‚ä¢‚Çó‚Ä¢ l lŒµ n b nŒµ ‚ä©‚ü® k ‚ü© A
œÑTyLog [A] = TyLog‚â§ (Œª m b' mŒµ ‚Üí InThereNat _ mŒµ _ _) [A]



AntiRedLog : ‚àÄ {k A B} ([B] :  Œì / lŒµ ‚ä©‚ü® k ‚ü© B) ‚Üí  Œì / lŒµ ‚ä¢ A :‚áí*: B ‚Üí  Œì / lŒµ ‚ä©‚ü® k ‚ü© A
AntiRedLog (U·µ£‚Ä≤ k‚Ä≤ k< ‚ä¢Œì) [ ‚ä¢A , ‚ä¢B' , D' ] rewrite redU* D' = U·µ£‚Ä≤ k‚Ä≤ k< ‚ä¢Œì
AntiRedLog (‚Ñï·µ£ [ ‚ä¢B , ‚ä¢‚Ñï , D ]) [ ‚ä¢A , ‚ä¢B' , D' ] = ‚Ñï·µ£ ([ ‚ä¢A , ‚ä¢‚Ñï , ‚áí*-comp D' D ])
AntiRedLog (ùîπ·µ£ [ ‚ä¢B , ‚ä¢ùîπ , D ]) [ ‚ä¢A , ‚ä¢B' , D' ] = ùîπ·µ£ ([ ‚ä¢A , ‚ä¢ùîπ , ‚áí*-comp D' D ])
-- AntiRedLog (Empty·µ£ [ ‚ä¢B , ‚ä¢Empty , D ]) [ ‚ä¢A , ‚ä¢B' , D' ] = Empty·µ£ ([ ‚ä¢A , ‚ä¢Empty , ‚áí*-comp D' D ])
-- AntiRedLog (Unit·µ£ [ ‚ä¢B , ‚ä¢Unit , D ]) [ ‚ä¢A , ‚ä¢B' , D' ] = Unit·µ£ ([ ‚ä¢A , ‚ä¢Unit , ‚áí*-comp D' D ])
AntiRedLog (ne (ne K [ ‚ä¢B , ‚ä¢K , D ] neK K‚â°K)) [ ‚ä¢A , ‚ä¢B' , D' ] = ne (ne K ([ ‚ä¢A , ‚ä¢K , ‚áí*-comp D' D ]) neK K‚â°K)
AntiRedLog (B·µ£ W (B·µ£ F G [ ‚ä¢B , ‚ä¢Œ† , D ] ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext)) ([ ‚ä¢A , ‚ä¢B' , D' ]) =
  B·µ£ W (B·µ£ F G ([ ‚ä¢A , ‚ä¢Œ† , ‚áí*-comp D' D ]) ‚ä¢F ‚ä¢G A‚â°A (Œª {m} {l'} {‚â§Œµ} ‚Üí [F] {m} {l'} {‚â§Œµ}) [G] G-ext)
AntiRedLog (emb {l} {lŒµ} {A}  0<1 [A]) D = emb 0<1 (AntiRedLog [A] D)  


RedLog : ‚àÄ {k A B} ([A] :  Œì / lŒµ ‚ä©‚ü® k ‚ü© A) ‚Üí  Œì / lŒµ ‚ä¢ A :‚áí*: B ‚Üí  Œì / lŒµ ‚ä©‚ü® k ‚ü© B
RedLog (U·µ£‚Ä≤ k‚Ä≤ k< ‚ä¢Œì) [ ‚ä¢A , ‚ä¢B' , D' ] rewrite PE.sym (whnfRed* D' U‚Çô) = U·µ£‚Ä≤ _ k< ‚ä¢Œì -- U·µ£‚Ä≤ k‚Ä≤ k< ‚ä¢Œì
RedLog (‚Ñï·µ£ [ ‚ä¢A , ‚ä¢‚Ñï , D ]) [ ‚ä¢A' , ‚ä¢B , D' ] = ‚Ñï·µ£ ([ ‚ä¢B , ‚ä¢‚Ñï , whrDet‚Üò (D , ‚Ñï‚Çô) D' ])
RedLog (ùîπ·µ£ [ ‚ä¢A , ‚ä¢ùîπ , D ]) [ ‚ä¢A' , ‚ä¢B , D' ] = ùîπ·µ£ ([ ‚ä¢B , ‚ä¢ùîπ , whrDet‚Üò (D , ùîπ‚Çô) D' ])
-- RedLog (Empty·µ£ [ ‚ä¢A , ‚ä¢Empty , D ]) [ ‚ä¢A' , ‚ä¢B , D' ] = Empty·µ£ ([ ‚ä¢B , ‚ä¢Empty , whrDet‚Üò (D , Empty‚Çô) D' ])
-- RedLog (Unit·µ£ [ ‚ä¢A , ‚ä¢Unit , D ]) [ ‚ä¢A' , ‚ä¢B , D' ] = Unit·µ£ ([ ‚ä¢B , ‚ä¢Unit , whrDet‚Üò (D , Unit‚Çô) D' ])
RedLog (ne (ne K [ ‚ä¢A , ‚ä¢K , D ] neK K‚â°K)) [ ‚ä¢A' , ‚ä¢B , D' ] = ne (ne K ([ ‚ä¢B , ‚ä¢K , whrDet‚Üò (D , ne neK) D' ]) neK K‚â°K)
RedLog (B·µ£ W (B·µ£ F G [ ‚ä¢A , ‚ä¢Œ† , D ] ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext)) ([ ‚ä¢A' , ‚ä¢B , D' ]) =
  B·µ£ W (B·µ£ F G ([ ‚ä¢B , ‚ä¢Œ† , whrDet‚Üò (D , ‚ü¶ W ‚üß‚Çô) D' ]) ‚ä¢F ‚ä¢G A‚â°A (Œª {m} {l'} {‚â§Œµ} ‚Üí [F] {m} {l'} {‚â§Œµ}) [G] G-ext)
RedLog (emb {l} {lŒµ} {A}  0<1 [A]) D = emb 0<1 (RedLog [A] D)  

-- AntiRedConv‚Ñï : ‚àÄ {A B C} k ([C] : Œì / lŒµ ‚ä©‚Ñï C) (C‚â°B :  Œì / lŒµ ‚ä©‚ü® k ‚ü© C ‚â° B / ‚Ñï·µ£ [C]) ‚Üí  Œì / lŒµ ‚ä¢ A :‚áí*: B
--              ‚Üí  Œì / lŒµ ‚ä©‚ü® k ‚ü© C ‚â° A / ‚Ñï·µ£ [C]
-- AntiRedConv‚Ñï k [C] (‚ä©‚Ñï‚â° _ B B‚áí‚Ñï) [ ‚ä¢A' , ‚ä¢B , D' ] = ‚ä©‚Ñï‚â° _ _ (‚áí*-comp D' B‚áí‚Ñï)
-- AntiRedConv‚Ñï k [C] (œù‚ä©‚Ñï‚â° mŒµ B‚áíB' Œ±B' tC‚â°B fC‚â°B) A‚áíB =
--  œù‚ä©‚Ñï‚â° mŒµ (:‚áí:*-comp A‚áíB B‚áíB') Œ±B'
--    (AntiRedConv‚Ñï k (œÑwfRed* [C]) tC‚â°B (œÑwfRed* A‚áíB))
--    (AntiRedConv‚Ñï k (œÑwfRed* [C]) fC‚â°B (œÑwfRed* A‚áíB))
   
-- AntiRedConvùîπ : ‚àÄ {A B C} k ([C] : Œì / lŒµ ‚ä©ùîπ C) (C‚â°B :  Œì / lŒµ ‚ä©‚ü® k ‚ü© C ‚â° B / ùîπ·µ£ [C]) ‚Üí  Œì / lŒµ ‚ä¢ A :‚áí*: B
--              ‚Üí  Œì / lŒµ ‚ä©‚ü® k ‚ü© C ‚â° A / ùîπ·µ£ [C]
-- AntiRedConvùîπ k [C] (‚ä©ùîπ‚â° _ B B‚áíùîπ) [ ‚ä¢A' , ‚ä¢B , D' ] = ‚ä©ùîπ‚â° _ _ (‚áí*-comp D' B‚áíùîπ)
-- AntiRedConvùîπ k [C] (œù‚ä©ùîπ‚â° mŒµ B‚áíB' Œ±B' tC‚â°B fC‚â°B) A‚áíB =
--  œù‚ä©ùîπ‚â° mŒµ (:‚áí:*-comp A‚áíB B‚áíB') Œ±B'
--   (AntiRedConvùîπ k (œÑwfRed* [C]) tC‚â°B (œÑwfRed* A‚áíB))
--   (AntiRedConvùîπ k (œÑwfRed* [C]) fC‚â°B (œÑwfRed* A‚áíB))

-- AntiRedConvNe : ‚àÄ {A B C} k ([C] : Œì / lŒµ ‚ä©ne C) (C‚â°B :  Œì / lŒµ ‚ä©‚ü® k ‚ü© C ‚â° B / ne [C]) ‚Üí  Œì / lŒµ ‚ä¢ A :‚áí*: B
--              ‚Üí  Œì / lŒµ ‚ä©‚ü® k ‚ü© C ‚â° A / ne [C]
-- AntiRedConvNe k (ne K D neK K‚â°K) (ne‚Çå [A] _ D' neM M‚â°M) A‚áíB = ne‚Çå _ _ ([ ‚ä¢A-red A‚áíB , ‚ä¢B-red D' , ‚áí*-comp (red A‚áíB) (red D') ]) neM M‚â°M
-- AntiRedConvNe k (ne K D neK K‚â°K) (œù‚ä©ne‚â° mŒµ {[A]t = [C]t} {[A]f = [C]f} B‚áíB' Œ±B tC‚â°B fC‚â°B) A‚áíB =
--   œù‚ä©ne‚â° mŒµ (:‚áí:*-comp A‚áíB B‚áíB') Œ±B
--     (AntiRedConvNe k [C]t tC‚â°B (œÑwfRed* A‚áíB))
--     (AntiRedConvNe k [C]f fC‚â°B (œÑwfRed* A‚áíB))

-- AntiRedConvW : ‚àÄ {A B C} k W ([C] : Œì / lŒµ ‚ä©‚Ä≤‚ü® k ‚ü©B‚ü® W ‚ü© C) (C‚â°B :  Œì / lŒµ ‚ä©‚ü® k ‚ü© C ‚â° B / B·µ£ W [C]) ‚Üí  Œì / lŒµ ‚ä¢ A :‚áí*: B
--              ‚Üí  Œì / lŒµ ‚ä©‚ü® k ‚ü© C ‚â° A / B·µ£ W [C]
-- AntiRedConvW k W (B·µ£ F G D ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext) (B‚Çå _ _ _ _ _ _ _ _ _ F' G' D' B‚â°C [F‚â°F'] [G‚â°G']) A‚áíB =
--   B‚Çå F G D ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext _ _ (‚áí*-comp (red A‚áíB) D') B‚â°C [F‚â°F'] [G‚â°G']
-- AntiRedConvW k W (B·µ£ F G D ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext) (Bœù [C] B‚áíB' Œ±B' [C]t [C]f tB‚â°C fB‚â°C) A‚áíB =
--   Bœù [C] (:‚áí:*-comp A‚áíB B‚áíB') Œ±B' [C]t [C]f
--     (AntiRedConvW k W [C]t tB‚â°C (œÑwfRed* A‚áíB))
--     (AntiRedConvW k W [C]f fB‚â°C (œÑwfRed* A‚áíB)) -- ([ ‚ä¢A-red A‚áíB , ‚ä¢B-red B‚áíB' , ‚áí*-comp (red A‚áíB) (red B‚áíB') ]) Œ±B' [C]t [C]f (AntiRedConvW k W [C]t tB‚â°C (œÑwfRed* (idRed:*: (‚ä¢B-red B‚áíB')))) (AntiRedConvW k W [C]f fB‚â°C (œÑwfRed* (idRed:*: (‚ä¢B-red B‚áíB'))))


AntiRedConvLog : ‚àÄ {k A B C} ([C] :  Œì / lŒµ ‚ä©‚ü® k ‚ü© C) (C‚â°B :  Œì / lŒµ ‚ä©‚ü® k ‚ü© C ‚â° B / [C]) ‚Üí  Œì / lŒµ ‚ä¢ A :‚áí*: B
             ‚Üí  Œì / lŒµ ‚ä©‚ü® k ‚ü© C ‚â° A / [C]
AntiRedConvLog (U·µ£‚Ä≤ k‚Ä≤ k< ‚ä¢Œì) (‚ä©¬π‚â°U B B‚â°U) A‚áíB rewrite B‚â°U = ‚ä©¬π‚â°U B (redU* (red A‚áíB)) --redU* (red A‚áíB)
AntiRedConvLog {k = k} (‚Ñï·µ£ [C]) (‚ä©¬π‚â°‚Ñï _ B‚â°‚Ñï) D = ‚ä©¬π‚â°‚Ñï [C] (‚áí*-comp (red D) B‚â°‚Ñï) -- AntiRedConv‚Ñï k [C] B‚â°‚Ñï D
AntiRedConvLog {k = k} (ùîπ·µ£ [C]) (‚ä©¬π‚â°ùîπ _ B‚â°ùîπ) D = ‚ä©¬π‚â°ùîπ [C] (‚áí*-comp (red D) B‚â°ùîπ) -- AntiRedConvùîπ k [C] B‚â°ùîπ D
-- AntiRedConvLog (Empty·µ£ x‚ÇÅ) C‚â°B D = ‚áí*-comp (red D) C‚â°B
-- AntiRedConvLog (Unit·µ£ x‚ÇÅ) C‚â°B D = ‚áí*-comp (red D) C‚â°B
AntiRedConvLog {k = k} (ne neC) (‚ä©¬π‚â°ne _ (ne‚Çå M D' neM K‚â°M)) A‚áíB = ‚ä©¬π‚â°ne neC (ne‚Çå M (:‚áí:*-comp A‚áíB D') neM K‚â°M) -- AntiRedConvNe k neC B‚â°C A‚áíB
AntiRedConvLog {k = k} (B·µ£ W [C]) (‚ä©¬π‚â°B W _ (B‚Çå F' G' D' A‚â°B [F‚â°F'] [G‚â°G'])) A‚áíB = ‚ä©¬π‚â°B W [C] (B‚Çå F' G' (‚áí*-comp (red A‚áíB) D') A‚â°B [F‚â°F'] [G‚â°G']) 
AntiRedConvLog (emb 0<1 [A]) (‚ä©¬π‚â°emb j< [A] C‚â°B) D = ‚ä©¬π‚â°emb 0<1 [A] (AntiRedConvLog [A] C‚â°B D)


-- TyLogU : ‚àÄ {l : LCon} {lŒµ : ‚ä¢‚Çó l} {k}
--            ‚Üí ([A] :  Œì / lŒµ ‚ä©‚ü® k ‚ü© U)
--            ‚Üí ‚àÉ (Œª K ‚Üí [A] PE.‚â° U·µ£ K)
-- TyLogU (U·µ£ K) = K , PE.refl
-- TyLogU (‚Ñï·µ£ D) with whnfRed* (red D) U‚Çô
-- ... | ()
-- TyLogU (ùîπ·µ£ D) with whnfRed* (red D) U‚Çô
-- ... | ()
-- -- TyLogU (Empty·µ£ D) with whnfRed* (red D) U‚Çô
-- -- ... | ()
-- -- TyLogU (Unit·µ£ D) with whnfRed* (red D) U‚Çô
-- -- ... | ()
-- TyLogU (ne‚Ä≤ K D neK K‚â°K) =
--   PE.‚ä•-elim (U‚â¢ne neK (whnfRed* (red D) U‚Çô))
-- TyLogU (B·µ£‚Ä≤ W F G D ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext) =
--   PE.‚ä•-elim (U‚â¢B W (whnfRed* (red D) U‚Çô))
-- TyLogU (emb 0<1 x) with TyLogU x
-- TyLogU (emb 0<1 x) | (U·µ£ _ () _) , e
-- TyLogU (œù·µ£ mŒµ tA fA) = {!!} -- PE.‚ä•-elim (U‚â¢Œ±ne Œ±B (whnfRed* (red A‚áíB) U‚Çô))
 

-- Reducible types are well-formed.
escape : ‚àÄ {k A} ‚Üí Œì / lŒµ ‚ä©‚ü® k ‚ü© A ‚Üí Œì / lŒµ ‚ä¢ A
escape (U·µ£‚Ä≤ k‚Ä≤ k< ‚ä¢Œì) = U‚±º ‚ä¢Œì
escape (‚Ñï·µ£ [ ‚ä¢A , ‚ä¢B , D ]) = ‚ä¢A
escape (ùîπ·µ£ [ ‚ä¢A , ‚ä¢B , D ]) = ‚ä¢A
-- escape (Empty·µ£ [ ‚ä¢A , ‚ä¢B , D ]) = ‚ä¢A
-- escape (Unit·µ£ [ ‚ä¢A , ‚ä¢B , D ]) = ‚ä¢A
escape (ne‚Ä≤ K [ ‚ä¢A , ‚ä¢B , D ] neK K‚â°K) = ‚ä¢A
escape (B·µ£‚Ä≤ W F G [ ‚ä¢A , ‚ä¢B , D ] ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext) = ‚ä¢A
escape (emb 0<1 A) = escape A
      
-- Reducible type equality respect the equality relation.

reflEqAux : ‚àÄ {k A B} ([B] :  Œì / lŒµ ‚ä©‚ü® k ‚ü© B) ‚Üí  Œì / lŒµ ‚ä¢ A :‚áí*: B ‚Üí  Œì / lŒµ ‚ä©‚ü® k ‚ü© B ‚â° A / [B]
reflEqAux (U·µ£‚Ä≤ k‚Ä≤ k< ‚ä¢Œì) [ ‚ä¢A , ‚ä¢B' , D' ] rewrite redU* D' = ‚ä©¬π‚â°U (U·µ£ k‚Ä≤ k< ‚ä¢Œì) PE.refl -- PE.refl
reflEqAux (‚Ñï·µ£ D) D' = ‚ä©¬π‚â°‚Ñï D (‚áí*-comp (red D') (red D)) -- ‚ä©‚Ñï‚â° _ _ (red ( [ ‚ä¢A , ‚ä¢‚Ñï , ‚áí*-comp D' D ] ))
reflEqAux (ùîπ·µ£ D) D' = ‚ä©¬π‚â°ùîπ D (‚áí*-comp (red D') (red D)) -- ‚ä©ùîπ‚â° _ _ (red ( [ ‚ä¢A , ‚ä¢ùîπ , ‚áí*-comp D' D ] ))
-- reflEqAux (Empty·µ£ [ ‚ä¢B , ‚ä¢Empty , D ]) [ ‚ä¢A , ‚ä¢B' , D' ] = ‚áí*-comp D' D
-- reflEqAux (Unit·µ£ [ ‚ä¢B , ‚ä¢Empty , D ]) [ ‚ä¢A , ‚ä¢B' , D' ] = ‚áí*-comp D' D
reflEqAux (ne (ne K D neK K‚â°K)) D' = ‚ä©¬π‚â°ne (ne K D neK K‚â°K) (ne‚Çå K (:‚áí:*-comp D' D) neK K‚â°K) --  ne‚Çå _ _ [ ‚ä¢A , ‚ä¢K , ‚áí*-comp D' D ] neK K‚â°K
reflEqAux (B·µ£ W (B·µ£ F G D ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext)) D' =
  ‚ä©¬π‚â°B W (B·µ£ F G D ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext)
    (B‚Çå F G (‚áí*-comp (red D') (red D)) A‚â°A
      (Œª [œÅ] ‚â§Œµ lŒµ' N<s ‚Üí let N , [F]‚ÇÇ = [F] [œÅ] in N , Œª ‚â§Œµ' lŒµ'' M<s ‚ä¢Œî ‚Üí
         let [[F]] = [F]‚ÇÇ (‚â§‚Çó-‚Ä¢ ‚â§Œµ ‚â§Œµ') lŒµ'' (‚â§-trans N<s (‚â§‚Çó-size lŒµ' ‚â§Œµ')) ‚ä¢Œî
         in reflEqAux [[F]] (idRed:*: (escape [[F]])))
      (Œª [œÅ] ‚â§Œµ lŒµ' N<s ‚ä¢Œî [a] ‚â§Œµ' lŒµ'' M<s ‚Üí let M , [G]‚ÇÇ = [G] [œÅ] ‚â§Œµ lŒµ' N<s ‚ä¢Œî [a] in M , Œª ‚â§Œµ'' lŒµ'' M<s ‚Üí
         let [[G]] = [G]‚ÇÇ (‚â§‚Çó-‚Ä¢ ‚â§Œµ' ‚â§Œµ'') lŒµ'' _ in reflEqAux [[G]] (idRed:*: (escape [[G]]))))
      -- (Œª {m} {_} {_} {l'} {‚â§Œµ} {lŒµ'} œÅ Œî ‚Üí reflEqAux ([F] œÅ Œî) (idRed:*: (escape ([F] {‚â§Œµ = ‚â§Œµ} œÅ Œî))))
      -- Œª {m} {œÅ} {_} {a} {l'} {‚â§Œµ} {lŒµ'} [œÅ] ‚ä¢Œî [a] ‚Üí reflEqAux ([G] [œÅ] ‚ä¢Œî [a]) (idRed:*: (escape ([G] [œÅ] ‚ä¢Œî [a])))) 
reflEqAux (emb 0<1 [A]) D = ‚ä©¬π‚â°emb 0<1 [A] (reflEqAux [A] D) -- reflEqAux [A] D




escapeEq : ‚àÄ {k A B} ‚Üí ([A] : Œì / lŒµ ‚ä©‚ü® k ‚ü© A)
            ‚Üí Œì / lŒµ ‚ä©‚ü® k ‚ü© A ‚â° B / [A]
            ‚Üí Œì / lŒµ ‚ä¢ A ‚âÖ B
escapeEq (U·µ£‚Ä≤ k‚Ä≤ k< ‚ä¢Œì) (‚ä©¬π‚â°U _ A=B) rewrite A=B = ‚âÖ-Urefl ‚ä¢Œì
escapeEq {k = k} (‚Ñï·µ£ D) (‚ä©¬π‚â°‚Ñï _ A=B)  = LogRel.escapeEq‚Ñï k (logRelRec _) D A=B
escapeEq {k = k} (ùîπ·µ£ D) (‚ä©¬π‚â°ùîπ _ A=B)  = LogRel.escapeEqùîπ k (logRelRec _) D A=B
-- escapeEq (Empty·µ£ [ ‚ä¢A , ‚ä¢B , D ]) D‚Ä≤ = ‚âÖ-red D D‚Ä≤ Empty‚Çô Empty‚Çô (‚âÖ-Emptyrefl (wf ‚ä¢A))
-- escapeEq (Unit·µ£ [ ‚ä¢A , ‚ä¢B , D ]) D‚Ä≤ = ‚âÖ-red D D‚Ä≤ Unit‚Çô Unit‚Çô (‚âÖ-Unitrefl (wf ‚ä¢A))
escapeEq {k = k} (ne neA) (‚ä©¬π‚â°ne _ A=B) = LogRel.escapeEqNe k (logRelRec _) neA A=B
escapeEq {k = k} (B·µ£‚Ä≤ W F G D ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext)
             (‚ä©¬π‚â°B W _ A=B) = LogRel.escapeEqB k (logRelRec _) (B·µ£ _ _ D ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext) A=B
  -- ‚âÖ-red (red D) D‚Ä≤ ‚ü¶ W ‚üß‚Çô ‚ü¶ W ‚üß‚Çô A‚â°B
escapeEq (emb 0<1 A) (‚ä©¬π‚â°emb 0<1 _ A‚â°B) = escapeEq A A‚â°B


-- Reducible terms are well-formed.
escapeTerm : ‚àÄ {k A t} ‚Üí ([A] : Œì / lŒµ ‚ä©‚ü® k ‚ü© A)
              ‚Üí Œì / lŒµ ‚ä©‚ü® k ‚ü© t ‚à∑ A / [A]
              ‚Üí Œì / lŒµ ‚ä¢ t ‚à∑ A
escapeTerm (U·µ£‚Ä≤ k‚Ä≤ k< ‚ä¢Œì) (U‚Çú ‚ä¢t t‚â°t [A]) = ‚ä¢t
escapeTerm {k = k} (‚Ñï·µ£ D) ‚ä¢t = conv (LogRel.escapeTerm‚Ñï k (logRelRec _) ‚ä¢t) (sym (subset* (red D)))
escapeTerm {k = k} (ùîπ·µ£ D) ‚ä¢t = conv (LogRel.escapeTermùîπ k (logRelRec _) ‚ä¢t) (sym (subset* (red D)))
-- escapeTerm (Empty·µ£ D) (Empty‚Çú e [ ‚ä¢t , ‚ä¢u , d ] t‚â°t prop) =
--   conv ‚ä¢t (sym (subset* (red D)))
-- escapeTerm (Unit·µ£ D) (Unit‚Çú e [ ‚ä¢t , ‚ä¢u , d ] prop) =
--   conv ‚ä¢t (sym (subset* (red D)))
escapeTerm {k = k} (ne neA) net = LogRel.escapeTermNe k (logRelRec _) neA net
escapeTerm (B·µ£‚Ä≤ BŒ† F G D ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext)
               (Œ†‚Çú ‚ä¢f f‚â°f [f] [f]‚ÇÅ) =
  conv ‚ä¢f (sym (subset* (red D)))
escapeTerm (B·µ£‚Ä≤ BŒ£ F G D ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext)
               (Œ£‚Çú p [ ‚ä¢t , ‚ä¢u , d ] pProd p‚âÖp [prop]) =
  conv ‚ä¢t (sym (subset* (red D)))
escapeTerm (emb 0<1 A) t = escapeTerm A t


-- Reducible term equality respect the equality relation.
escapeTermEq : ‚àÄ {k A t u} ‚Üí ([A] : Œì / lŒµ ‚ä©‚ü® k ‚ü© A)
                ‚Üí Œì / lŒµ ‚ä©‚ü® k ‚ü© t ‚â° u ‚à∑ A / [A]
                ‚Üí Œì / lŒµ ‚ä¢ t ‚âÖ u ‚à∑ A
escapeTermEq (U·µ£‚Ä≤ k‚Ä≤ k< ‚ä¢Œì) (U‚Çú‚Çå ‚ä¢t ‚ä¢u A‚â°B [A] [B] [A‚â°B]) =
 A‚â°B --  ‚âÖ‚Çú-red (id (U‚±º ‚ä¢Œì)) (red‚Çú d) (red‚Çú d‚Ä≤) U‚Çô (typeWhnf typeA) (typeWhnf typeB) A‚â°B
escapeTermEq {k = k} (‚Ñï·µ£ D) t‚â°u =
  ‚âÖ-conv (LogRel.escapeTermEq‚Ñï k (logRelRec _) t‚â°u) (sym (subset* (red D)))
escapeTermEq {k = k} (ùîπ·µ£ D) t‚â°u =
  ‚âÖ-conv (LogRel.escapeTermEqùîπ k (logRelRec _) t‚â°u) (sym (subset* (red D)))
-- escapeTermEq (Empty·µ£ D) (Empty‚Çú‚Çå k k‚Ä≤ d d‚Ä≤ k‚â°k‚Ä≤ prop) =
--   let natK , natK‚Ä≤ = esplit prop
--   in  ‚âÖ‚Çú-red (red D) (red‚Çú d) (red‚Çú d‚Ä≤) Empty‚Çô
--              (ne natK) (ne natK‚Ä≤) k‚â°k‚Ä≤
-- escapeTermEq {k} {Œì} {A} {t} {u} (Unit·µ£ D) (Unit‚Çú‚Çå ‚ä¢t ‚ä¢u) =
--   let t‚âÖu = ‚âÖ‚Çú-Œ∑-unit ‚ä¢t ‚ä¢u
--       A‚â°Unit = subset* (red D)
--   in  ‚âÖ-conv t‚âÖu (sym A‚â°Unit)
escapeTermEq {k = k} (ne neA) t=u = LogRel.escapeTermEqNe k (logRelRec _) neA t=u
escapeTermEq (B·µ£‚Ä≤ BŒ† F G D ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext)
                 (Œ†‚Çú‚Çå f‚â°g [f] [g] [f‚â°g]) =
  ‚âÖ-conv f‚â°g (sym (subset* (red D))) -- ‚âÖ‚Çú-red (red D) (red‚Çú d) (red‚Çú d‚Ä≤) Œ†‚Çô (functionWhnf funcF) (functionWhnf funcG) f‚â°g
escapeTermEq (B·µ£‚Ä≤ BŒ£ F G D ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext)
                 (Œ£‚Çú‚Çå p r d d‚Ä≤ pProd rProd p‚âÖr [t] [u] [prop‚â°]) =
  ‚âÖ‚Çú-red (red D) (red‚Çú d) (red‚Çú d‚Ä≤) Œ£‚Çô (productWhnf pProd) (productWhnf rProd) p‚âÖr
escapeTermEq (emb 0<1 A) t‚â°u = escapeTermEq A t‚â°u 


-- escapeEqLog : ‚àÄ {k A B} ‚Üí ([A] : Œì / lŒµ ‚ä©‚ü® k ‚ü© A)
--             ‚Üí Œì / lŒµ ‚ä©‚ü® k ‚ü© A ‚â° B / [A]
--             ‚Üí Œì / lŒµ ‚ä©‚ü® k ‚ü© B
-- escapeEqLog (U·µ£‚Ä≤ k‚Ä≤ k< ‚ä¢Œì) PE.refl = {!!}
-- escapeEqLog {k = k} (‚Ñï·µ£ D) A=B  = {!!}
-- escapeEqLog {k = k} (ùîπ·µ£ D) A=B  = {!!}
-- -- escapeEqLog (Empty·µ£ [ ‚ä¢A , ‚ä¢B , D ]) D‚Ä≤ = ‚âÖ-red D D‚Ä≤ Empty‚Çô Empty‚Çô (‚âÖ-Emptyrefl (wf ‚ä¢A))
-- -- escapeEqLog (Unit·µ£ [ ‚ä¢A , ‚ä¢B , D ]) D‚Ä≤ = ‚âÖ-red D D‚Ä≤ Unit‚Çô Unit‚Çô (‚âÖ-Unitrefl (wf ‚ä¢A))
-- escapeEqLog {k = k} (ne neA) A=B = {!!}
-- escapeEqLog {k = k} (B·µ£‚Ä≤ W F G D ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext)
--                  (B‚Çå _ _ _ _ _ _ _ _ _ F‚Ä≤ G‚Ä≤ D‚Ä≤ A‚â°B [F‚â°F‚Ä≤] [G‚â°G‚Ä≤]) =
--                  B·µ£ W (B·µ£ F‚Ä≤ G‚Ä≤ [ {!!} , {!!} , D‚Ä≤ ] {!!} {!!} {!!}
--                      (Œª {m} {l'} {f<} {lŒµ'} {œÅ} {Œî} [œÅ] ‚ä¢Œî ‚Üí escapeEqLog ([F] [œÅ] ‚ä¢Œî) ([F‚â°F‚Ä≤] [œÅ] ‚ä¢Œî))
--                      (Œª {m} {œÅ} {Œî} {a} {l'} {f<} {lŒµ'} [œÅ] ‚ä¢Œî [a] ‚Üí escapeEqLog ([G] [œÅ] ‚ä¢Œî {!!}) {!!}) {!!})
-- escapeEqLog {k = k} (B·µ£‚Ä≤ W F G D ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext)
--                  (Bœù [C] B‚áíB' Œ±B [A]t [A]f tA‚â°B fA‚â°B) = œù·µ£ {!!} B‚áíB' Œ±B {!!} {!!}
-- escapeEqLog (emb 0<1 A) A‚â°B = emb 0<1 (escapeEqLog A A‚â°B)
-- escapeEqLog (œù·µ£ mŒµ A‚áíB Œ±B tB fB) ( x , y ) = {!!}


--   -- escapeEqLogW : ‚àÄ W {k A B} ‚Üí ([A] : Œì / lŒµ  ‚ä©¬πB‚ü® W ‚ü© A)
--   --             ‚Üí Œì / lŒµ ‚ä©¬πB‚ü® W ‚ü© A ‚â° B / [A]
--   --             ‚Üí Œì / lŒµ ‚ä©¬π B
--   -- escapeEqLogW W {k = k} (B·µ£ F G D ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext)
--   --                  (B‚Çå _ _ _ _ _ _ _ _ _ F‚Ä≤ G‚Ä≤ D‚Ä≤ A‚â°B [F‚â°F‚Ä≤] [G‚â°G‚Ä≤]) =
--   --                  B·µ£ W (B·µ£ F‚Ä≤ G‚Ä≤ [ {!!} , {!!} , D‚Ä≤ ] {!!} {!!} {!!}
--   --                    (Œª {m} {l'} {f<} {lŒµ'} {œÅ} {Œî} [œÅ] ‚ä¢Œî ‚Üí {!!}) {!!} {!!})
--   -- escapeEqLogW W {k = k} (B·µ£ F G D ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext)
--   --                  (Bœù [C] B‚áíB' Œ±B [A]t [A]f tA‚â°B fA‚â°B) = œù·µ£ {!!} B‚áíB' Œ±B (escapeEqLogW W [A]t tA‚â°B) (escapeEqLogW W [A]f fA‚â°B)
