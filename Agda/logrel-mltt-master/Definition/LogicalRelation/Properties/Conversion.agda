{-# OPTIONS --without-K --safe #-}

open import Definition.Typed.EqualityRelation

module Definition.LogicalRelation.Properties.Conversion {{eqrel : EqRelSet}} where
open EqRelSet {{...}}

open import Definition.Untyped hiding (_‚à∑_)
open import Definition.Typed
open import Definition.Typed.RedSteps
open import Definition.Typed.Properties
import Definition.Typed.Weakening as Wk
open import Definition.LogicalRelation
open import Definition.LogicalRelation.Properties.Escape
open import Definition.LogicalRelation.ShapeView
-- open import Definition.LogicalRelation.Irrelevance

open import Tools.Nat
open import Tools.Product
import Tools.PropositionalEquality as PE

private
  variable
    n : Nat
    Œì : Con Term n
    l : LCon
    lŒµ : ‚ä¢‚Çó l

-- Conversion of syntactic reduction closures.
convRed:*: : ‚àÄ {t u A B} ‚Üí Œì / lŒµ ‚ä¢ t :‚áí*: u ‚à∑ A ‚Üí Œì / lŒµ ‚ä¢ A ‚â° B ‚Üí Œì / lŒµ ‚ä¢ t :‚áí*: u ‚à∑ B
convRed:*: [ ‚ä¢t , ‚ä¢u , d ] A‚â°B = [ conv ‚ä¢t  A‚â°B , conv ‚ä¢u  A‚â°B , conv* d  A‚â°B ]

  -- Irrelevance for type equality with propositionally equal second types
irrelevanceEqR‚Ä≤ : ‚àÄ {A B B‚Ä≤ k} (eqB : B PE.‚â° B‚Ä≤) (p : Œì / lŒµ ‚ä©‚ü® k ‚ü© A)
                ‚Üí Œì / lŒµ ‚ä©‚ü® k ‚ü© A ‚â° B / p ‚Üí Œì / lŒµ ‚ä©‚ü® k ‚ü© A ‚â° B‚Ä≤ / p
irrelevanceEqR‚Ä≤ PE.refl p A‚â°B = A‚â°B

œÑTermLog : ‚àÄ {k A t n b nŒµ} [A] [A]b
             ‚Üí Œì / lŒµ ‚ä©‚ü® k ‚ü©  t ‚à∑ A / [A]
             ‚Üí Œì / ‚ä¢‚Çó‚Ä¢ l lŒµ n b nŒµ ‚ä©‚ü® k ‚ü©  t ‚à∑ A / [A]b
œÑTermLog [A] [A]b tA = {!!}

TermLogWhnf : ‚àÄ {k A t} [A]
             ‚Üí Œì / lŒµ ‚ä©‚ü® k ‚ü©  t ‚à∑ A / [A]
             ‚Üí ‚àÉ (Œª u ‚Üí Whnf {lŒµ = lŒµ} u √ó Œì / lŒµ ‚ä¢ t :‚áí*: u ‚à∑ A)
TermLogWhnf [A] tA = {!!}
             

-- test :  ‚àÄ {k A t t' n nŒµ} [A] [A]t [A]f
--              ‚Üí Œì / lŒµ ‚ä¢ t :‚áí*: t' ‚à∑ A
--              ‚Üí Whnf {lŒµ = lŒµ} t'
--              ‚Üí Œì / ‚ä¢‚Çó‚Ä¢ l lŒµ n Btrue nŒµ ‚ä©‚ü® k ‚ü©  t ‚à∑ A / [A]t
--              ‚Üí Œì / ‚ä¢‚Çó‚Ä¢ l lŒµ n Bfalse nŒµ ‚ä©‚ü® k ‚ü©  t ‚à∑ A / [A]f
--              ‚Üí Œì / lŒµ ‚ä©‚ü® k ‚ü©  t ‚à∑ A / [A]
-- test (B·µ£‚Ä≤ BŒ† F G D ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext)
--      (B·µ£‚Ä≤ BŒ† tF tG tD t‚ä¢F t‚ä¢G tA‚â°A t[F] t[G] tG-ext)
--      (B·µ£‚Ä≤ BŒ† fF fG fD f‚ä¢F f‚ä¢G fA‚â°A f[F] f[G] fG-ext) t‚áít' lam‚Çô
--      (tf , td , tFun , tf‚â°f , tprop1 , tprop2)
--      (ff , fd , fFun , ff‚â°f , fprop1 , fprop2)
--      with whrDet*Term ( œÑRed*Term (red‚Çú t‚áít') , lam‚Çô ) ( conv* (red‚Çú td)  (sym (subset* (red tD))) , functionWhnf tFun) 
--      with whrDet*Term ( œÑRed*Term (red‚Çú t‚áít') , lam‚Çô ) ( conv* (red‚Çú fd) (sym (subset* (red fD))) , functionWhnf fFun) 
-- test (B·µ£‚Ä≤ BŒ† F G D ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext)
--      (B·µ£‚Ä≤ BŒ† tF tG tD t‚ä¢F t‚ä¢G tA‚â°A t[F] t[G] tG-ext)
--      (B·µ£‚Ä≤ BŒ† fF fG fD f‚ä¢F f‚ä¢G fA‚â°A f[F] f[G] fG-ext) t‚áít' lam‚Çô
--      (tf , td , tFun , tf‚â°f , tprop1 , tprop2)
--      (ff , fd , fFun , ff‚â°f , fprop1 , fprop2)
--        | PE.refl | PE.refl 
--      with whrDet* ( œÑRed* (red D) , Œ†‚Çô ) ( red tD , Œ†‚Çô) 
--      with whrDet* ( œÑRed* (red D) , Œ†‚Çô ) ( red fD , Œ†‚Çô)
-- test {Œì = Œì} (B·µ£‚Ä≤ BŒ† F G D ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext)
--      (B·µ£‚Ä≤ BŒ† F G tD t‚ä¢F t‚ä¢G tA‚â°A t[F] t[G] tG-ext)
--      (B·µ£‚Ä≤ BŒ† F G fD f‚ä¢F f‚ä¢G fA‚â°A f[F] f[G] fG-ext) t‚áít' lam‚Çô
--      (tf , td , tFun , tf‚â°f , tprop1 , tprop2)
--      (ff , fd , fFun , ff‚â°f , fprop1 , fprop2)
--        | PE.refl | PE.refl | PE.refl | PE.refl  = tf , (conv:*: t‚áít' (subset* (red D)) , (lam‚Çô , (‚âÖ‚Çú-œù tf‚â°f ff‚â°f ,
--          ((Œª {m : Nat} {œÅ} {Œî} {a} {b} {l' : LCon} {‚â§Œµ} {lŒµ' : ‚ä¢‚Çó l'}
--                [œÅ] (‚ä¢Œî : ‚ä¢ Œî / lŒµ') [a] [b] [a‚â°b] ‚Üí
--                {!!}) ,
--                Œª {m : Nat} {œÅ} {Œî} {a} {l' : LCon} {‚â§Œµ} {lŒµ' : ‚ä¢‚Çó l'} [œÅ]
--                    (‚ä¢Œî : ‚ä¢ Œî / lŒµ') [a] ‚Üí
--                    test ([G] [œÅ] ‚ä¢Œî [a])
--                      (t[G] [œÅ] (œÑCon _ _ _ _ ‚ä¢Œî) (œÑTermLog ([F] [œÅ] ‚ä¢Œî) _ [a]))
--                      (f[G] [œÅ] (œÑCon _ _ _ _ ‚ä¢Œî) (œÑTermLog ([F] [œÅ] ‚ä¢Œî) _ [a])) {!!} {!!}
--                        (tprop2 [œÅ] (œÑCon _ _ _ _ ‚ä¢Œî) (œÑTermLog ([F] [œÅ] ‚ä¢Œî) _ [a]))
--                        (fprop2 [œÅ] (œÑCon _ _ _ _ ‚ä¢Œî) (œÑTermLog ([F] [œÅ] ‚ä¢Œî) _ [a]))))))
-- test [A] [A]t [A]f t‚áít' wht' tt ft = {!!}


-- -- mutual

-- --   convTermT‚ÇÅNe : ‚àÄ {k k‚Ä≤ A B t} {[A] [B] A‚â°B}
-- --              ‚Üí ShapeView {n = n} Œì {l = l} {lŒµ = lŒµ} k k‚Ä≤ A B (ne [A]) (ne [B]) (‚ä©¬π‚â°ne _ A‚â°B)
-- --              ‚Üí Œì / lŒµ ‚ä©‚ü® k ‚ü©  t ‚à∑ A / ne [A]
-- --              ‚Üí Œì / lŒµ ‚ä©‚ü® k‚Ä≤ ‚ü© t ‚à∑ B / ne [B]
-- --   convTermT‚ÇÅNe {n = n} {Œì = Œì} {l = l} {lŒµ = lŒµ} (ne (ne K D neK K‚â°K) (ne K‚ÇÅ D‚ÇÅ neK‚ÇÅ K‚â°K‚ÇÅ) (ne‚Çå M D‚Ä≤ neM K‚â°M))
-- --              (ne‚Çú k d (neNf‚Çú neK‚ÇÇ ‚ä¢k k‚â°k)) =
-- --     let K‚â°K‚ÇÅ = PE.subst (Œª x ‚Üí _  / _ ‚ä¢ _ ‚â° x)
-- --                         (whrDet* (red D‚Ä≤ , ne neM) (red D‚ÇÅ , ne neK‚ÇÅ))
-- --                         (‚âÖ-eq (~-to-‚âÖ K‚â°M))
-- --     in  ne‚Çú k (convRed:*: d K‚â°K‚ÇÅ)
-- --             (neNf‚Çú neK‚ÇÇ (conv ‚ä¢k K‚â°K‚ÇÅ) (~-conv {n} {Œì} {l} {lŒµ} k‚â°k K‚â°K‚ÇÅ))
-- --   convTermT‚ÇÅNe (ne (ne K D neK K‚â°K) (ne K‚ÇÅ D‚ÇÅ neK‚ÇÅ K‚ÇÅ‚â°K‚ÇÅ) (ne‚Çå M D‚Ä≤ neM K‚â°M))
-- --              (ne‚Çú k d (neNfœù {[A]t = [A]t} {[A]f = [A]f} ‚ä¢k Œ±k tk fk))
-- --              with whrDet* (red D‚Ä≤ , ne neM) (red D‚ÇÅ , ne neK‚ÇÅ)
-- --   convTermT‚ÇÅNe (ne (ne K D neK K‚â°K) (ne K‚ÇÅ D‚ÇÅ neK‚ÇÅ K‚ÇÅ‚â°K‚ÇÅ) (ne‚Çå M D‚Ä≤ neM K‚â°M))
-- --              (ne‚Çú k d (neNfœù {[A]t = ne tK tD tneK tK‚â°K} {[A]f = ne fK fD fneK fK‚â°K} ‚ä¢k Œ±k tk fk))
-- --              | PE.refl
-- --              with whrDet* (red (idRed:*: (‚ä¢A-red tD)) , ne neK) (red tD , ne tneK)
-- --              with whrDet* (red (idRed:*: (‚ä¢A-red fD)) , ne neK) (red fD , ne fneK)
-- --   convTermT‚ÇÅNe {k = j} {k‚Ä≤ = j‚Ä≤} (ne (ne K D neK K‚â°K) (ne K‚ÇÅ D‚ÇÅ neK‚ÇÅ K‚ÇÅ‚â°K‚ÇÅ) (ne‚Çå M D‚Ä≤ neM K‚â°M))
-- --              (ne‚Çú k d (neNfœù {[A]t = ne tK tD tneK tK‚â°K} {[A]f = ne fK fD fneK fK‚â°K} ‚ä¢k Œ±k tk fk))
-- --              | PE.refl | PE.refl | PE.refl =
-- --              ne‚Çú k (convRed:*: d (‚âÖ-eq (~-to-‚âÖ K‚â°M)))
-- --                    (neNfœù (conv ‚ä¢k (‚âÖ-eq (~-to-‚âÖ K‚â°M))) Œ±k
-- --                                  (convTermT‚ÇÅNe {k = j} {k‚Ä≤ = j‚Ä≤}
-- --                                                (goodCases (ne (ne tK tD tneK tK‚â°K))
-- --                                                           (ne (ne K‚ÇÅ (idRed:*: (œÑTy _ _ _ _ (‚ä¢B-red D‚ÇÅ))) neK‚ÇÅ (~-œÑ K‚ÇÅ‚â°K‚ÇÅ)))
-- --                                                           (‚ä©¬π‚â°ne _ (ne‚Çå M (idRed:*: (œÑTy _ _ _ _ (‚ä¢B-red D‚ÇÅ))) neM (~-œÑ K‚â°M))))
-- --                                                tk)
-- --                                  (convTermT‚ÇÅNe {k = j} {k‚Ä≤ = j‚Ä≤}
-- --                                                (goodCases (ne (ne fK fD fneK fK‚â°K))
-- --                                                           (ne (ne K‚ÇÅ (idRed:*: (œÑTy _ _ _ _ (‚ä¢B-red D‚ÇÅ))) neK‚ÇÅ (~-œÑ K‚ÇÅ‚â°K‚ÇÅ)))
-- --                                                           (‚ä©¬π‚â°ne _ (ne‚Çå M (idRed:*: (œÑTy _ _ _ _ (‚ä¢B-red D‚ÇÅ))) neM (~-œÑ K‚â°M))))
-- --                                                fk))

-- --   -- Helper function for conversion of terms converting from left to right.
-- --   convTermT‚ÇÅ : ‚àÄ {k k‚Ä≤ A B t} {[A] : Œì / lŒµ ‚ä©‚ü® k ‚ü© A} {[B] : Œì / lŒµ ‚ä©‚ü® k‚Ä≤ ‚ü© B}
-- --              {A‚â°B : Œì / lŒµ ‚ä©‚ü® k ‚ü©  A ‚â° B / [A]}
-- --              ‚Üí ShapeView Œì k k‚Ä≤ A B [A] [B] A‚â°B
-- --              ‚Üí Œì / lŒµ ‚ä©‚ü® k ‚ü©  t ‚à∑ A / [A]
-- --              ‚Üí Œì / lŒµ ‚ä©‚ü® k‚Ä≤ ‚ü© t ‚à∑ B / [B]
-- --   convTermT‚ÇÅ (‚Ñï·µ• D D‚Ä≤ A‚â°B) t = t
-- --   convTermT‚ÇÅ (ùîπ·µ• D D‚Ä≤ A‚â°B)t = t
-- --   -- convTermT‚ÇÅ (Empty·µ• D D‚Ä≤) A‚â°B t = t
-- --   -- convTermT‚ÇÅ (Unit·µ• D D‚Ä≤) A‚â°B t = t
-- --   convTermT‚ÇÅ {k = k} {k‚Ä≤ = k‚Ä≤} (ne neA neB neA=B) t = convTermT‚ÇÅNe {k = k} {k‚Ä≤ = k‚Ä≤} (ne neA neB neA=B) t
-- --   convTermT‚ÇÅ {Œì = Œì} {lŒµ = lŒµ} (B·µ• BŒ† (B·µ£ F G D ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext)
-- --                                       (B·µ£ F‚ÇÅ G‚ÇÅ D‚ÇÅ ‚ä¢F‚ÇÅ ‚ä¢G‚ÇÅ A‚â°A‚ÇÅ [F]‚ÇÅ [G]‚ÇÅ G-ext‚ÇÅ)
-- --                                       (B‚Çå F‚Ä≤ G‚Ä≤ D‚Ä≤ A‚â°B [F‚â°F‚Ä≤] [G‚â°G‚Ä≤]))
-- --              (Œ†‚Çú f d funcF f‚â°f [f] [f]‚ÇÅ) =
-- --     let Œ†F‚ÇÅG‚ÇÅ‚â°Œ†F‚Ä≤G‚Ä≤   = whrDet* (red D‚ÇÅ , Œ†‚Çô) (D‚Ä≤ , Œ†‚Çô)
-- --         F‚ÇÅ‚â°F‚Ä≤ , G‚ÇÅ‚â°G‚Ä≤ = B-PE-injectivity BŒ† Œ†F‚ÇÅG‚ÇÅ‚â°Œ†F‚Ä≤G‚Ä≤
-- --         Œ†FG‚â°Œ†F‚ÇÅG‚ÇÅ = PE.subst (Œª x ‚Üí Œì  / lŒµ ‚ä¢ Œ† F ‚ñπ G ‚â° x) (PE.sym Œ†F‚ÇÅG‚ÇÅ‚â°Œ†F‚Ä≤G‚Ä≤)
-- --                              (‚âÖ-eq A‚â°B)
-- --     in  Œ†‚Çú f (convRed:*: d Œ†FG‚â°Œ†F‚ÇÅG‚ÇÅ) funcF (‚âÖ-conv f‚â°f Œ†FG‚â°Œ†F‚ÇÅG‚ÇÅ)
-- --            (Œª {_} {œÅ} {Œî : Con Term _} {a b} {l' : LCon} {‚â§Œµ : _ ‚â§‚Çó l'} [œÅ] ‚ä¢Œî [a] [b] [a‚â°b] ‚Üí
-- --               let [F‚â°F‚ÇÅ] = irrelevanceEqR‚Ä≤ (PE.cong (wk œÅ) (PE.sym F‚ÇÅ‚â°F‚Ä≤))
-- --                                            ([F] {‚â§Œµ = ‚â§Œµ} [œÅ] ‚ä¢Œî) ([F‚â°F‚Ä≤] [œÅ] ‚ä¢Œî)
-- --                   [a]‚ÇÅ = convTerm‚ÇÇ ([F] [œÅ] ‚ä¢Œî) ([F]‚ÇÅ [œÅ] ‚ä¢Œî) [F‚â°F‚ÇÅ] [a]
-- --                   [b]‚ÇÅ = convTerm‚ÇÇ ([F] [œÅ] ‚ä¢Œî) ([F]‚ÇÅ [œÅ] ‚ä¢Œî) [F‚â°F‚ÇÅ] [b]
-- --                   [a‚â°b]‚ÇÅ = convEqTerm‚ÇÇ ([F] [œÅ] ‚ä¢Œî) ([F]‚ÇÅ [œÅ] ‚ä¢Œî) [F‚â°F‚ÇÅ] [a‚â°b]
-- --                   [G‚â°G‚ÇÅ] = irrelevanceEqR‚Ä≤ (PE.cong (Œª x ‚Üí wk (lift œÅ) x [ _ ])
-- --                                                     (PE.sym G‚ÇÅ‚â°G‚Ä≤))
-- --                                            ([G] [œÅ] ‚ä¢Œî [a]‚ÇÅ)
-- --                                            ([G‚â°G‚Ä≤] [œÅ] ‚ä¢Œî [a]‚ÇÅ)
-- --               in  convEqTerm‚ÇÅ ([G] [œÅ] ‚ä¢Œî [a]‚ÇÅ) ([G]‚ÇÅ [œÅ] ‚ä¢Œî [a]) [G‚â°G‚ÇÅ]
-- --                               ([f] [œÅ] ‚ä¢Œî [a]‚ÇÅ [b]‚ÇÅ [a‚â°b]‚ÇÅ))
-- --           (Œª {_} {œÅ} {Œî : Con Term _} {a} {l' : LCon} {‚â§Œµ : _ ‚â§‚Çó l'} [œÅ] ‚ä¢Œî [a] ‚Üí
-- --              let [F‚â°F‚ÇÅ] = irrelevanceEqR‚Ä≤ (PE.cong (wk œÅ) (PE.sym F‚ÇÅ‚â°F‚Ä≤))
-- --                                           ([F] {‚â§Œµ = ‚â§Œµ} [œÅ] ‚ä¢Œî) ([F‚â°F‚Ä≤] [œÅ] ‚ä¢Œî)
-- --                  [a]‚ÇÅ = convTerm‚ÇÇ ([F] [œÅ] ‚ä¢Œî) ([F]‚ÇÅ [œÅ] ‚ä¢Œî) [F‚â°F‚ÇÅ] [a]
-- --                  [G‚â°G‚ÇÅ] = irrelevanceEqR‚Ä≤ (PE.cong (Œª x ‚Üí wk (lift œÅ) x [ _ ])
-- --                                                    (PE.sym G‚ÇÅ‚â°G‚Ä≤))
-- --                                           ([G] [œÅ] ‚ä¢Œî [a]‚ÇÅ)
-- --                                           ([G‚â°G‚Ä≤] [œÅ] ‚ä¢Œî [a]‚ÇÅ)
-- --              in  convTerm‚ÇÅ ([G] [œÅ] ‚ä¢Œî [a]‚ÇÅ) ([G]‚ÇÅ [œÅ] ‚ä¢Œî [a]) [G‚â°G‚ÇÅ] ([f]‚ÇÅ [œÅ] ‚ä¢Œî [a]‚ÇÅ))
-- --   convTermT‚ÇÅ {Œì = Œì} {lŒµ = lŒµ} {k = k} {k‚Ä≤ = k‚Ä≤} (B·µ• BŒ£ (B·µ£ F G D ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext)
-- --                                                         (B·µ£ F‚ÇÅ G‚ÇÅ D‚ÇÅ ‚ä¢F‚ÇÅ ‚ä¢G‚ÇÅ A‚â°A‚ÇÅ [F]‚ÇÅ [G]‚ÇÅ G-ext‚ÇÅ)
-- --                                                         (B‚Çå F‚Ä≤ G‚Ä≤ D‚Ä≤ A‚â°B [F‚â°F‚Ä≤] [G‚â°G‚Ä≤]))
-- --              (Œ£‚Çú f d pProd f‚â°f [fst] [snd]) =
-- --     let Œ£F‚ÇÅG‚ÇÅ‚â°Œ£F‚Ä≤G‚Ä≤   = whrDet* (red D‚ÇÅ , Œ£‚Çô) (D‚Ä≤ , Œ£‚Çô)
-- --         F‚ÇÅ‚â°F‚Ä≤ , G‚ÇÅ‚â°G‚Ä≤ = B-PE-injectivity BŒ£ Œ£F‚ÇÅG‚ÇÅ‚â°Œ£F‚Ä≤G‚Ä≤
-- --         Œ£FG‚â°Œ£F‚ÇÅG‚ÇÅ = PE.subst (Œª x ‚Üí Œì  / lŒµ ‚ä¢ Œ£ F ‚ñπ G ‚â° x) (PE.sym Œ£F‚ÇÅG‚ÇÅ‚â°Œ£F‚Ä≤G‚Ä≤)
-- --                              (‚âÖ-eq A‚â°B)
-- --         ‚ä¢Œì = wf ‚ä¢F
-- --         F‚â°F‚ÇÅ = PE.subst (Œª x ‚Üí Œì / lŒµ ‚ä©‚ü® k ‚ü© wk id F ‚â° wk id x / [F] Wk.id ‚ä¢Œì)
-- --                         (PE.sym F‚ÇÅ‚â°F‚Ä≤)
-- --                         ([F‚â°F‚Ä≤] Wk.id ‚ä¢Œì)
-- --         [fst]‚ÇÅ = convTerm‚ÇÅ ([F] Wk.id ‚ä¢Œì) ([F]‚ÇÅ Wk.id (wf¬†‚ä¢F‚ÇÅ)) F‚â°F‚ÇÅ [fst]
-- --         G‚â°G‚ÇÅ = PE.subst (Œª x ‚Üí Œì / lŒµ ‚ä©‚ü® k ‚ü© wk (lift id) G [ fst f ] ‚â° wk (lift id) x [ fst f ] / [G] Wk.id ‚ä¢Œì [fst])
-- --                         (PE.sym G‚ÇÅ‚â°G‚Ä≤)
-- --                         ([G‚â°G‚Ä≤] Wk.id ‚ä¢Œì [fst])
-- --         [snd]‚ÇÅ = convTerm‚ÇÅ ([G] Wk.id ‚ä¢Œì [fst]) ([G]‚ÇÅ Wk.id (wf ‚ä¢F‚ÇÅ) [fst]‚ÇÅ) G‚â°G‚ÇÅ [snd]
-- --     in  Œ£‚Çú f (convRed:*: d Œ£FG‚â°Œ£F‚ÇÅG‚ÇÅ) pProd (‚âÖ-conv f‚â°f Œ£FG‚â°Œ£F‚ÇÅG‚ÇÅ)
-- --           [fst]‚ÇÅ [snd]‚ÇÅ
-- --   convTermT‚ÇÅ (U·µ• (U·µ£ .‚Å∞ 0<1 ‚ä¢Œì) (U·µ£ .‚Å∞ 0<1 ‚ä¢Œì‚ÇÅ) A‚â°B) t = t
-- --   convTermT‚ÇÅ (emb‚Å∞¬π x) t = convTermT‚ÇÅ x t -- convTermT‚ÇÅ x A‚â°B t
-- --   convTermT‚ÇÅ (emb¬π‚Å∞ x) t = convTermT‚ÇÅ x t -- convTermT‚ÇÅ x A‚â°B t
-- --   convTermT‚ÇÅ (œù·µ£-l A‚áíA' Œ±A (B·µ£ BŒ† [B]) [A]t [A]f (B·µ£ BŒ† [B]t) (B·µ£ BŒ† [B]f) tAB fAB tA‚â°B fA‚â°B) (tt , ft) =
-- --     let tconv = convTermT‚ÇÅ tA‚â°B tt
-- --       in let fconv = convTermT‚ÇÅ fA‚â°B ft
-- --            in {!!} , ({!!} , ({!!} , ({!!} , ({!!} , {!!}))))
-- --   convTermT‚ÇÅ (œù·µ£-l A‚áíA' Œ±A [B] [A]t [A]f [B]t [B]f tAB fAB tA‚â°B fA‚â°B) (tt , ft) = {!!}
-- --   convTermT‚ÇÅ (œù·µ£-r B‚áíB' B‚áíB'' Œ±B Œ±B' [A] [A]t [A]f [B]t [B]f tAB fAB tA‚â°B fA‚â°B) t = {!!}

-- --   -- Helper function for conversion of terms converting from right to left.
-- --   convTermT‚ÇÇ : ‚àÄ {k k‚Ä≤ A B t} {[A] : Œì / lŒµ ‚ä©‚ü® k ‚ü© A} {[B] : Œì / lŒµ ‚ä©‚ü® k‚Ä≤ ‚ü© B}
-- --             {A‚â°B : Œì / lŒµ ‚ä©‚ü® k ‚ü©  A ‚â° B / [A]}
-- --            ‚Üí ShapeView Œì k k‚Ä≤ A B [A] [B] A‚â°B
-- --            ‚Üí Œì / lŒµ ‚ä©‚ü® k‚Ä≤ ‚ü© t ‚à∑ B / [B]
-- --            ‚Üí Œì / lŒµ ‚ä©‚ü® k ‚ü©  t ‚à∑ A / [A]
-- --   convTermT‚ÇÇ (‚Ñï·µ• D D‚Ä≤ A‚â°B) t = t
-- --   convTermT‚ÇÇ (ùîπ·µ• D D‚Ä≤ A‚â°B) t = t
-- --   -- convTermT‚ÇÇ (Empty·µ• D D‚Ä≤) A‚â°B t = t
-- --   -- convTermT‚ÇÇ (Unit·µ• D D‚Ä≤) A‚â°B t = t
-- --   convTermT‚ÇÇ (ne (ne K D neK K‚â°K) (ne K‚ÇÅ D‚ÇÅ neK‚ÇÅ K‚â°K‚ÇÅ) (ne‚Çå M D‚Ä≤ neM K‚â°M))
-- --              (ne‚Çú k d (neNf‚Çú neK‚ÇÇ ‚ä¢k k‚â°k)) =
-- --     let K‚ÇÅ‚â°K = PE.subst (Œª x ‚Üí _  / _ ‚ä¢ x ‚â° _)
-- --                         (whrDet* (red D‚Ä≤ , ne neM) (red D‚ÇÅ , ne neK‚ÇÅ))
-- --                         (sym (‚âÖ-eq (~-to-‚âÖ K‚â°M)))
-- --     in  ne‚Çú k (convRed:*: d K‚ÇÅ‚â°K)
-- --             (neNf‚Çú neK‚ÇÇ (conv ‚ä¢k K‚ÇÅ‚â°K) (~-conv k‚â°k K‚ÇÅ‚â°K))
-- --   convTermT‚ÇÇ (ne (ne K D neK K‚â°K) (ne K‚ÇÅ D‚ÇÅ neK‚ÇÅ K‚â°K‚ÇÅ) (ne‚Çå M D‚Ä≤ neM K‚â°M))
-- --              (ne‚Çú k d (neNfœù ‚ä¢k Œ±k tk fk)) = {!!}
-- --   convTermT‚ÇÇ {Œì = Œì} {lŒµ = lŒµ} (B·µ• BŒ† (B·µ£ F G D ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext)
-- --                                       (B·µ£ F‚ÇÅ G‚ÇÅ D‚ÇÅ ‚ä¢F‚ÇÅ ‚ä¢G‚ÇÅ A‚â°A‚ÇÅ [F]‚ÇÅ [G]‚ÇÅ G-ext‚ÇÅ)
-- --                                       (B‚Çå F‚Ä≤ G‚Ä≤ D‚Ä≤ A‚â°B [F‚â°F‚Ä≤] [G‚â°G‚Ä≤]))
-- --              (Œ†‚Çú f d funcF f‚â°f [f] [f]‚ÇÅ) =
-- --     let Œ†F‚ÇÅG‚ÇÅ‚â°Œ†F‚Ä≤G‚Ä≤   = whrDet* (red D‚ÇÅ , Œ†‚Çô) (D‚Ä≤ , Œ†‚Çô)
-- --         F‚ÇÅ‚â°F‚Ä≤ , G‚ÇÅ‚â°G‚Ä≤ = B-PE-injectivity BŒ† Œ†F‚ÇÅG‚ÇÅ‚â°Œ†F‚Ä≤G‚Ä≤
-- --         Œ†FG‚â°Œ†F‚ÇÅG‚ÇÅ = PE.subst (Œª x ‚Üí Œì  / lŒµ ‚ä¢ Œ† F ‚ñπ G ‚â° x)
-- --                              (PE.sym Œ†F‚ÇÅG‚ÇÅ‚â°Œ†F‚Ä≤G‚Ä≤) (‚âÖ-eq A‚â°B)
-- --     in  Œ†‚Çú f (convRed:*: d (sym Œ†FG‚â°Œ†F‚ÇÅG‚ÇÅ)) funcF (‚âÖ-conv f‚â°f (sym Œ†FG‚â°Œ†F‚ÇÅG‚ÇÅ))
-- --            (Œª {_} {œÅ} {Œî : Con Term _} {a b} {l' : LCon} {‚â§Œµ : _ ‚â§‚Çó l'} [œÅ] ‚ä¢Œî [a] [b] [a‚â°b] ‚Üí
-- --               let [F‚â°F‚ÇÅ] = irrelevanceEqR‚Ä≤ (PE.cong (wk œÅ) (PE.sym F‚ÇÅ‚â°F‚Ä≤))
-- --                                            ([F] [œÅ] ‚ä¢Œî) ([F‚â°F‚Ä≤] [œÅ] ‚ä¢Œî)
-- --                   [a]‚ÇÅ = convTerm‚ÇÅ ([F] [œÅ] ‚ä¢Œî) ([F]‚ÇÅ {‚â§Œµ = ‚â§Œµ} [œÅ] ‚ä¢Œî) [F‚â°F‚ÇÅ] [a]
-- --                   [b]‚ÇÅ = convTerm‚ÇÅ ([F] [œÅ] ‚ä¢Œî) ([F]‚ÇÅ [œÅ] ‚ä¢Œî) [F‚â°F‚ÇÅ] [b]
-- --                   [a‚â°b]‚ÇÅ = convEqTerm‚ÇÅ ([F] [œÅ] ‚ä¢Œî) ([F]‚ÇÅ [œÅ] ‚ä¢Œî) [F‚â°F‚ÇÅ] [a‚â°b]
-- --                   [G‚â°G‚ÇÅ] = irrelevanceEqR‚Ä≤ (PE.cong (Œª x ‚Üí wk (lift œÅ) x [ _ ])
-- --                                                     (PE.sym G‚ÇÅ‚â°G‚Ä≤))
-- --                                            ([G] [œÅ] ‚ä¢Œî [a])
-- --                                            ([G‚â°G‚Ä≤] [œÅ] ‚ä¢Œî [a])
-- --               in  convEqTerm‚ÇÇ ([G] [œÅ] ‚ä¢Œî [a]) ([G]‚ÇÅ [œÅ] ‚ä¢Œî [a]‚ÇÅ)
-- --                               [G‚â°G‚ÇÅ] ([f] [œÅ] ‚ä¢Œî [a]‚ÇÅ [b]‚ÇÅ [a‚â°b]‚ÇÅ))
-- --            (Œª {_} {œÅ} {Œî : Con Term _} {a} {l' : LCon} {‚â§Œµ : _ ‚â§‚Çó l'} [œÅ] ‚ä¢Œî [a] ‚Üí
-- --               let [F‚â°F‚ÇÅ] = irrelevanceEqR‚Ä≤ (PE.cong (wk œÅ) (PE.sym F‚ÇÅ‚â°F‚Ä≤))
-- --                                            ([F] [œÅ] ‚ä¢Œî) ([F‚â°F‚Ä≤] [œÅ] ‚ä¢Œî)
-- --                   [a]‚ÇÅ = convTerm‚ÇÅ ([F] [œÅ] ‚ä¢Œî) ([F]‚ÇÅ {‚â§Œµ = ‚â§Œµ} [œÅ] ‚ä¢Œî) [F‚â°F‚ÇÅ] [a]
-- --                   [G‚â°G‚ÇÅ] = irrelevanceEqR‚Ä≤ (PE.cong (Œª x ‚Üí wk (lift œÅ) x [ _ ])
-- --                                                     (PE.sym G‚ÇÅ‚â°G‚Ä≤))
-- --                                            ([G] [œÅ] ‚ä¢Œî [a])
-- --                                            ([G‚â°G‚Ä≤] [œÅ] ‚ä¢Œî [a])
-- --               in  convTerm‚ÇÇ ([G] [œÅ] ‚ä¢Œî [a]) ([G]‚ÇÅ [œÅ] ‚ä¢Œî [a]‚ÇÅ)
-- --                             [G‚â°G‚ÇÅ] ([f]‚ÇÅ [œÅ] ‚ä¢Œî [a]‚ÇÅ))
-- --   convTermT‚ÇÇ {Œì = Œì} {lŒµ = lŒµ} {k = k} {k‚Ä≤ = k‚Ä≤} (B·µ• BŒ£ (B·µ£ F G D ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext)
-- --                                                         (B·µ£ F‚ÇÅ G‚ÇÅ D‚ÇÅ ‚ä¢F‚ÇÅ ‚ä¢G‚ÇÅ A‚â°A‚ÇÅ [F]‚ÇÅ [G]‚ÇÅ G-ext‚ÇÅ)
-- --                                                         (B‚Çå F‚Ä≤ G‚Ä≤ D‚Ä≤ A‚â°B [F‚â°F‚Ä≤] [G‚â°G‚Ä≤]))
-- --              (Œ£‚Çú f d pProd f‚â°f [fst]‚ÇÅ [snd]‚ÇÅ) =
-- --     let Œ£F‚ÇÅG‚ÇÅ‚â°Œ£F‚Ä≤G‚Ä≤   = whrDet* (red D‚ÇÅ , Œ£‚Çô) (D‚Ä≤ , Œ£‚Çô)
-- --         F‚ÇÅ‚â°F‚Ä≤ , G‚ÇÅ‚â°G‚Ä≤ = B-PE-injectivity BŒ£ Œ£F‚ÇÅG‚ÇÅ‚â°Œ£F‚Ä≤G‚Ä≤
-- --         Œ£FG‚â°Œ£F‚ÇÅG‚ÇÅ = PE.subst (Œª x ‚Üí Œì  / lŒµ ‚ä¢ Œ£ F ‚ñπ G ‚â° x)
-- --                              (PE.sym Œ£F‚ÇÅG‚ÇÅ‚â°Œ£F‚Ä≤G‚Ä≤) (‚âÖ-eq A‚â°B)
-- --         ‚ä¢Œì = wf ‚ä¢F
-- --         ‚ä¢Œì‚ÇÅ = wf ‚ä¢F‚ÇÅ
-- --         F‚â°F‚ÇÅ = PE.subst (Œª x ‚Üí Œì / lŒµ ‚ä©‚ü® k ‚ü© wk id F ‚â° wk id x / [F] Wk.id ‚ä¢Œì)
-- --                         (PE.sym F‚ÇÅ‚â°F‚Ä≤)
-- --                         ([F‚â°F‚Ä≤] Wk.id ‚ä¢Œì)
-- --         [fst] = (convTerm‚ÇÇ ([F] Wk.id ‚ä¢Œì) ([F]‚ÇÅ Wk.id ‚ä¢Œì‚ÇÅ) F‚â°F‚ÇÅ [fst]‚ÇÅ)
-- --         G‚â°G‚ÇÅ = PE.subst (Œª x ‚Üí Œì / lŒµ ‚ä©‚ü® k ‚ü© wk (lift id) G [ fst f ] ‚â° wk (lift id) x [ fst f ] / [G] Wk.id ‚ä¢Œì [fst])
-- --                         (PE.sym G‚ÇÅ‚â°G‚Ä≤)
-- --                         ([G‚â°G‚Ä≤] Wk.id ‚ä¢Œì [fst])
-- --         [snd] = (convTerm‚ÇÇ ([G] Wk.id ‚ä¢Œì [fst]) ([G]‚ÇÅ Wk.id ‚ä¢Œì‚ÇÅ [fst]‚ÇÅ) G‚â°G‚ÇÅ [snd]‚ÇÅ)
-- --     in  Œ£‚Çú f (convRed:*: d (sym Œ£FG‚â°Œ£F‚ÇÅG‚ÇÅ)) pProd (‚âÖ-conv f‚â°f (sym Œ£FG‚â°Œ£F‚ÇÅG‚ÇÅ))
-- --            [fst] [snd]
-- --   convTermT‚ÇÇ (U·µ• (U·µ£ .‚Å∞ 0<1 ‚ä¢Œì) (U·µ£ .‚Å∞ 0<1 ‚ä¢Œì‚ÇÅ) A‚â°B) t = t
-- --   convTermT‚ÇÇ (emb‚Å∞¬π x) t = {!!} -- convTermT‚ÇÇ x A‚â°B t
-- --   convTermT‚ÇÇ (emb¬π‚Å∞ x) t = {!!} -- convTermT‚ÇÇ x A‚â°B t
-- --   convTermT‚ÇÇ (œù·µ£-l A‚áíA' Œ±A [B] [A]t [A]f [B]t [B]f tAB fAB tA‚â°B fA‚â°B) t = {!!}
-- --   convTermT‚ÇÇ (œù·µ£-r B‚áíB' B‚áíB'' Œ±B Œ±B' [A] [A]t [A]f [B]t [B]f tAB fAB tA‚â°B fA‚â°B) t = {!!}

-- --   -- Conversion of terms converting from left to right.
-- --   convTerm‚ÇÅ : ‚àÄ {A B t k k‚Ä≤} ([A] : Œì / lŒµ ‚ä©‚ü® k ‚ü© A) ([B] : Œì / lŒµ ‚ä©‚ü® k‚Ä≤ ‚ü© B)
-- --             ‚Üí Œì / lŒµ ‚ä©‚ü® k ‚ü©  A ‚â° B / [A]
-- --             ‚Üí Œì / lŒµ ‚ä©‚ü® k ‚ü©  t ‚à∑ A / [A]
-- --             ‚Üí Œì / lŒµ ‚ä©‚ü® k‚Ä≤ ‚ü© t ‚à∑ B / [B]
-- --   convTerm‚ÇÅ [A] [B] A‚â°B t = convTermT‚ÇÅ (goodCases [A] [B] A‚â°B) t

-- --   -- Conversion of terms converting from right to left.
-- --   convTerm‚ÇÇ : ‚àÄ {A B t k k‚Ä≤} ([A] : Œì / lŒµ ‚ä©‚ü® k ‚ü© A) ([B] : Œì / lŒµ ‚ä©‚ü® k‚Ä≤ ‚ü© B)
-- --           ‚Üí Œì / lŒµ ‚ä©‚ü® k ‚ü©  A ‚â° B / [A]
-- --           ‚Üí Œì / lŒµ ‚ä©‚ü® k‚Ä≤ ‚ü© t ‚à∑ B / [B]
-- --           ‚Üí Œì / lŒµ ‚ä©‚ü® k ‚ü©  t ‚à∑ A / [A]
-- --   -- NOTE: this would be easier to define by mutual induction with symEq (which needs conversion),
-- --   -- rather than by defining everything from scratch for both left-to-right and right-to-left,
-- --   -- but with the mutual definition termination checking fails in Agda.
-- --   convTerm‚ÇÇ [A] [B] A‚â°B t = convTermT‚ÇÇ (goodCases [A] [B] A‚â°B) t

-- --   -- Conversion of terms converting from right to left
-- --   -- with some propositionally equal types.
-- --   convTerm‚ÇÇ‚Ä≤ : ‚àÄ {A B B‚Ä≤ t k k‚Ä≤} ‚Üí B PE.‚â° B‚Ä≤
-- --           ‚Üí ([A] : Œì / lŒµ ‚ä©‚ü® k ‚ü© A) ([B] : Œì / lŒµ ‚ä©‚ü® k‚Ä≤ ‚ü© B)
-- --           ‚Üí Œì / lŒµ ‚ä©‚ü® k ‚ü©  A ‚â° B‚Ä≤ / [A]
-- --           ‚Üí Œì / lŒµ ‚ä©‚ü® k‚Ä≤ ‚ü© t ‚à∑ B / [B]
-- --           ‚Üí Œì / lŒµ ‚ä©‚ü® k ‚ü©  t ‚à∑ A / [A]
-- --   convTerm‚ÇÇ‚Ä≤ PE.refl [A] [B] A‚â°B t = convTerm‚ÇÇ [A] [B] A‚â°B t


-- --   -- Helper function for conversion of term equality converting from left to right.
-- --   convEqTermT‚ÇÅ : ‚àÄ {k k‚Ä≤ A B t u} {[A] : Œì / lŒµ ‚ä©‚ü® k ‚ü© A} {[B] : Œì / lŒµ ‚ä©‚ü® k‚Ä≤ ‚ü© B}
-- --                {A‚â°B : Œì / lŒµ ‚ä©‚ü® k ‚ü©  A ‚â° B / [A]}
-- --                ‚Üí ShapeView Œì k k‚Ä≤ A B [A] [B] A‚â°B
-- --                ‚Üí Œì / lŒµ ‚ä©‚ü® k ‚ü©  t ‚â° u ‚à∑ A / [A]
-- --                ‚Üí Œì / lŒµ ‚ä©‚ü® k‚Ä≤ ‚ü© t ‚â° u ‚à∑ B / [B]
-- --   convEqTermT‚ÇÅ (‚Ñï·µ• D D‚Ä≤ A‚â°B) t‚â°u = t‚â°u
-- --   convEqTermT‚ÇÅ (ùîπ·µ• D D‚Ä≤ A‚â°B) t‚â°u = t‚â°u
-- --   -- convEqTermT‚ÇÅ (Empty·µ• D D‚Ä≤) A‚â°B t‚â°u = t‚â°u
-- --   -- convEqTermT‚ÇÅ (Unit·µ• D D‚Ä≤) A‚â°B t‚â°u = t‚â°u
-- --   convEqTermT‚ÇÅ (ne (ne K D neK K‚â°K) (ne K‚ÇÅ D‚ÇÅ neK‚ÇÅ K‚â°K‚ÇÅ) (ne‚Çå M D‚Ä≤ neM K‚â°M))
-- --                (ne‚Çú‚Çå k m d d‚Ä≤ (neNf‚Çú‚Çå neK‚ÇÇ neM‚ÇÅ k‚â°m)) =
-- --     let K‚â°K‚ÇÅ = PE.subst (Œª x ‚Üí _  / _ ‚ä¢ _ ‚â° x)
-- --                         (whrDet* (red D‚Ä≤ , ne neM) (red D‚ÇÅ , ne neK‚ÇÅ))
-- --                         (‚âÖ-eq (~-to-‚âÖ K‚â°M))
-- --     in  ne‚Çú‚Çå k m (convRed:*: d K‚â°K‚ÇÅ)
-- --                  (convRed:*: d‚Ä≤ K‚â°K‚ÇÅ)
-- --                  (neNf‚Çú‚Çå neK‚ÇÇ neM‚ÇÅ (~-conv k‚â°m K‚â°K‚ÇÅ))
-- --   convEqTermT‚ÇÅ (ne (ne K D neK K‚â°K) (ne K‚ÇÅ D‚ÇÅ neK‚ÇÅ K‚â°K‚ÇÅ) (ne‚Çå M D‚Ä≤ neM K‚â°M))
-- --              (ne‚Çú‚Çå k m d d' (‚ä©neNfœù-l Œ±k [k'] tk‚â°k' fk‚â°k')) = {!!}
-- --   convEqTermT‚ÇÅ (ne (ne K D neK K‚â°K) (ne K‚ÇÅ D‚ÇÅ neK‚ÇÅ K‚â°K‚ÇÅ) (ne‚Çå M D‚Ä≤ neM K‚â°M))
-- --              (ne‚Çú‚Çå k m d d' (‚ä©neNfœù-r [k] Œ±k' tk‚â°k' fk‚â°k')) = {!!}
-- --   convEqTermT‚ÇÅ {Œì = Œì} {lŒµ = lŒµ} (B·µ• BŒ† (B·µ£ F G D ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext)
-- --                                         (B·µ£ F‚ÇÅ G‚ÇÅ D‚ÇÅ ‚ä¢F‚ÇÅ ‚ä¢G‚ÇÅ A‚â°A‚ÇÅ [F]‚ÇÅ [G]‚ÇÅ G-ext‚ÇÅ)
-- --                                         (B‚Çå F‚Ä≤ G‚Ä≤ D‚Ä≤ A‚â°B [F‚â°F‚Ä≤] [G‚â°G‚Ä≤]))
-- --                (Œ†‚Çú‚Çå f g d d‚Ä≤ funcF funcG t‚â°u [t] [u] [t‚â°u]) =
-- --     let [A] = B·µ£‚Ä≤ BŒ† F G D ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext
-- --         [B] = B·µ£‚Ä≤ BŒ† F‚ÇÅ G‚ÇÅ D‚ÇÅ ‚ä¢F‚ÇÅ ‚ä¢G‚ÇÅ A‚â°A‚ÇÅ [F]‚ÇÅ [G]‚ÇÅ G-ext‚ÇÅ
-- --         [A‚â°B] = B‚Çå F‚Ä≤ G‚Ä≤ D‚Ä≤ A‚â°B [F‚â°F‚Ä≤] [G‚â°G‚Ä≤]
-- --         Œ†F‚ÇÅG‚ÇÅ‚â°Œ†F‚Ä≤G‚Ä≤ = whrDet* (red D‚ÇÅ , Œ†‚Çô) (D‚Ä≤ , Œ†‚Çô)
-- --         Œ†FG‚â°Œ†F‚ÇÅG‚ÇÅ = PE.subst (Œª x ‚Üí Œì  / lŒµ ‚ä¢ Œ† F ‚ñπ G ‚â° x)
-- --                              (PE.sym Œ†F‚ÇÅG‚ÇÅ‚â°Œ†F‚Ä≤G‚Ä≤) (‚âÖ-eq A‚â°B)
-- --     in  Œ†‚Çú‚Çå f g (convRed:*: d Œ†FG‚â°Œ†F‚ÇÅG‚ÇÅ) (convRed:*: d‚Ä≤ Œ†FG‚â°Œ†F‚ÇÅG‚ÇÅ)
-- --             funcF funcG (‚âÖ-conv t‚â°u Œ†FG‚â°Œ†F‚ÇÅG‚ÇÅ)
-- --             (convTerm‚ÇÅ [A] [B] (‚ä©¬π‚â°B _ _ [A‚â°B]) [t]) (convTerm‚ÇÅ [A] [B] (‚ä©¬π‚â°B _ _ [A‚â°B]) [u])
-- --             (Œª {_} {œÅ} {Œî : Con Term _} {a} {l' : LCon} {‚â§Œµ : _ ‚â§‚Çó l'} [œÅ] ‚ä¢Œî [a] ‚Üí
-- --                let F‚ÇÅ‚â°F‚Ä≤ , G‚ÇÅ‚â°G‚Ä≤ = B-PE-injectivity BŒ† (whrDet* (red D‚ÇÅ , Œ†‚Çô) (D‚Ä≤ , Œ†‚Çô))
-- --                    [F‚â°F‚ÇÅ] = irrelevanceEqR‚Ä≤ (PE.cong (wk œÅ) (PE.sym F‚ÇÅ‚â°F‚Ä≤))
-- --                                             ([F] {‚â§Œµ = ‚â§Œµ} [œÅ] ‚ä¢Œî) ([F‚â°F‚Ä≤] [œÅ] ‚ä¢Œî)
-- --                    [a]‚ÇÅ = convTerm‚ÇÇ ([F] [œÅ] ‚ä¢Œî) ([F]‚ÇÅ [œÅ] ‚ä¢Œî) [F‚â°F‚ÇÅ] [a]
-- --                    [G‚â°G‚ÇÅ] = irrelevanceEqR‚Ä≤ (PE.cong (Œª x ‚Üí wk (lift œÅ) x [ _ ])
-- --                                                      (PE.sym G‚ÇÅ‚â°G‚Ä≤))
-- --                                             ([G] [œÅ] ‚ä¢Œî [a]‚ÇÅ)
-- --                                             ([G‚â°G‚Ä≤] [œÅ] ‚ä¢Œî [a]‚ÇÅ)
-- --                in  convEqTerm‚ÇÅ ([G] [œÅ] ‚ä¢Œî [a]‚ÇÅ) ([G]‚ÇÅ [œÅ] ‚ä¢Œî [a])
-- --                                [G‚â°G‚ÇÅ] ([t‚â°u] [œÅ] ‚ä¢Œî [a]‚ÇÅ))
-- --   convEqTermT‚ÇÅ {Œì = Œì} {lŒµ = lŒµ} (B·µ• BŒ£ (B·µ£ F G D ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext)
-- --                                         (B·µ£ F‚ÇÅ G‚ÇÅ D‚ÇÅ ‚ä¢F‚ÇÅ ‚ä¢G‚ÇÅ A‚â°A‚ÇÅ [F]‚ÇÅ [G]‚ÇÅ G-ext‚ÇÅ)
-- --                                         (B‚Çå F‚Ä≤ G‚Ä≤ D‚Ä≤ A‚â°B [F‚â°F‚Ä≤] [G‚â°G‚Ä≤]))
-- --                (Œ£‚Çú‚Çå p r d d‚Ä≤ pProd rProd p‚âÖr [t] [u] [fstp] [fstr] [fst‚â°] [snd‚â°]) =
-- --     let [A] = B·µ£‚Ä≤ BŒ£ F G D ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext
-- --         [B] = B·µ£‚Ä≤ BŒ£ F‚ÇÅ G‚ÇÅ D‚ÇÅ ‚ä¢F‚ÇÅ ‚ä¢G‚ÇÅ A‚â°A‚ÇÅ (Œª {m} {l'} {‚â§Œµ} {lŒµ'} ‚Üí [F]‚ÇÅ {m} {l'} {‚â§Œµ} {lŒµ'}) [G]‚ÇÅ G-ext‚ÇÅ
-- --         [A‚â°B] = ‚ä©¬π‚â°B _ _ (B‚Çå F‚Ä≤ G‚Ä≤ D‚Ä≤ A‚â°B (Œª {m} {l'} {œÅ} {Œî} {‚â§Œµ} {lŒµ'} ‚Üí [F‚â°F‚Ä≤] {‚â§Œµ = ‚â§Œµ} {lŒµ'}) [G‚â°G‚Ä≤])
-- --         Œ£F‚ÇÅG‚ÇÅ‚â°Œ£F‚Ä≤G‚Ä≤ = whrDet* (red D‚ÇÅ , Œ£‚Çô) (D‚Ä≤ , Œ£‚Çô)
-- --         F‚ÇÅ‚â°F‚Ä≤ , G‚ÇÅ‚â°G‚Ä≤ = B-PE-injectivity BŒ£ Œ£F‚ÇÅG‚ÇÅ‚â°Œ£F‚Ä≤G‚Ä≤
-- --         Œ£FG‚â°Œ£F‚ÇÅG‚ÇÅ = PE.subst (Œª x ‚Üí Œì  / lŒµ ‚ä¢ Œ£ F ‚ñπ G ‚â° x)
-- --                              (PE.sym Œ£F‚ÇÅG‚ÇÅ‚â°Œ£F‚Ä≤G‚Ä≤) (‚âÖ-eq A‚â°B)
-- --         ‚ä¢Œì = wf ‚ä¢F
-- --         ‚ä¢Œì‚ÇÅ = wf ‚ä¢F‚ÇÅ
-- --         F‚â°F‚ÇÅ = PE.subst (Œª x ‚Üí Œì / lŒµ ‚ä©‚ü® _ ‚ü© wk id F ‚â° wk id x / [F] Wk.id ‚ä¢Œì)
-- --                         (PE.sym F‚ÇÅ‚â°F‚Ä≤)
-- --                         ([F‚â°F‚Ä≤] Wk.id ‚ä¢Œì)
-- --         [fstp]‚ÇÅ = convTerm‚ÇÅ ([F] Wk.id ‚ä¢Œì) ([F]‚ÇÅ Wk.id ‚ä¢Œì‚ÇÅ) F‚â°F‚ÇÅ [fstp]
-- --         [fstr]‚ÇÅ = convTerm‚ÇÅ ([F] Wk.id ‚ä¢Œì) ([F]‚ÇÅ Wk.id ‚ä¢Œì‚ÇÅ) F‚â°F‚ÇÅ [fstr]
-- --         [fst‚â°]‚ÇÅ = convEqTerm‚ÇÅ ([F] Wk.id ‚ä¢Œì) ([F]‚ÇÅ Wk.id ‚ä¢Œì‚ÇÅ) F‚â°F‚ÇÅ [fst‚â°]
-- --         G‚â°G‚ÇÅ = PE.subst (Œª x ‚Üí Œì / lŒµ ‚ä©‚ü® _ ‚ü© wk (lift id) G [ fst p ] ‚â° wk (lift id) x [ fst p ] / [G] Wk.id ‚ä¢Œì [fstp])
-- --                         (PE.sym G‚ÇÅ‚â°G‚Ä≤)
-- --                         ([G‚â°G‚Ä≤] Wk.id ‚ä¢Œì [fstp])
-- --         [snd‚â°]‚ÇÅ = convEqTerm‚ÇÅ ([G] Wk.id ‚ä¢Œì [fstp]) ([G]‚ÇÅ Wk.id ‚ä¢Œì‚ÇÅ [fstp]‚ÇÅ) G‚â°G‚ÇÅ [snd‚â°]
-- --     in  Œ£‚Çú‚Çå p r (convRed:*: d Œ£FG‚â°Œ£F‚ÇÅG‚ÇÅ) (convRed:*: d‚Ä≤ Œ£FG‚â°Œ£F‚ÇÅG‚ÇÅ)
-- --             pProd rProd (‚âÖ-conv p‚âÖr Œ£FG‚â°Œ£F‚ÇÅG‚ÇÅ)
-- --             (convTerm‚ÇÅ [A] [B] [A‚â°B] [t]) (convTerm‚ÇÅ [A] [B] [A‚â°B] [u])
-- --             [fstp]‚ÇÅ [fstr]‚ÇÅ [fst‚â°]‚ÇÅ [snd‚â°]‚ÇÅ
-- --   convEqTermT‚ÇÅ (U·µ• (U·µ£ .‚Å∞ 0<1 ‚ä¢Œì) (U·µ£ .‚Å∞ 0<1 ‚ä¢Œì‚ÇÅ) A‚â°B) t‚â°u = t‚â°u
-- --   convEqTermT‚ÇÅ (emb‚Å∞¬π x) t‚â°u = {!!} -- convEqTermT‚ÇÅ x A‚â°B t‚â°u
-- --   convEqTermT‚ÇÅ (emb¬π‚Å∞ x) t‚â°u = {!!} -- convEqTermT‚ÇÅ x A‚â°B t‚â°u
-- --   convEqTermT‚ÇÅ (œù·µ£-l A‚áíA' Œ±A [B] [A]t [A]f [B]t [B]f tAB fAB tA‚â°B fA‚â°B) t‚â°u = {!!}
-- --   convEqTermT‚ÇÅ (œù·µ£-r B‚áíB' B‚áíB'' Œ±B Œ±B' [A] [A]t [A]f [B]t [B]f tAB fAB tA‚â°B fA‚â°B) t‚â°u = {!!}

-- --   -- Helper function for conversion of term equality converting from right to left.
-- --   convEqTermT‚ÇÇ : ‚àÄ {k k‚Ä≤ A B t u} {[A] : Œì / lŒµ ‚ä©‚ü® k ‚ü© A} {[B] : Œì / lŒµ ‚ä©‚ü® k‚Ä≤ ‚ü© B}
-- --                    {A‚â°B : Œì / lŒµ ‚ä©‚ü® k ‚ü©  A ‚â° B / [A]}
-- --              ‚Üí ShapeView Œì k k‚Ä≤ A B [A] [B] A‚â°B
-- --              ‚Üí Œì / lŒµ ‚ä©‚ü® k‚Ä≤ ‚ü© t ‚â° u ‚à∑ B / [B]
-- --              ‚Üí Œì / lŒµ ‚ä©‚ü® k ‚ü©  t ‚â° u ‚à∑ A / [A]
-- --   convEqTermT‚ÇÇ (‚Ñï·µ• D D‚Ä≤ A‚â°B) t‚â°u = t‚â°u
-- --   convEqTermT‚ÇÇ (ùîπ·µ• D D‚Ä≤ A‚â°B) t‚â°u = t‚â°u
-- --   -- convEqTermT‚ÇÇ (Empty·µ• D D‚Ä≤) A‚â°B t‚â°u = t‚â°u
-- --   -- convEqTermT‚ÇÇ (Unit·µ• D D‚Ä≤) A‚â°B t‚â°u = t‚â°u
-- --   convEqTermT‚ÇÇ (ne (ne K D neK K‚â°K) (ne K‚ÇÅ D‚ÇÅ neK‚ÇÅ K‚â°K‚ÇÅ) (ne‚Çå M D‚Ä≤ neM K‚â°M))
-- --                (ne‚Çú‚Çå k m d d‚Ä≤ (neNf‚Çú‚Çå neK‚ÇÇ neM‚ÇÅ k‚â°m)) =
-- --     let K‚ÇÅ‚â°K = PE.subst (Œª x ‚Üí _  / _ ‚ä¢ x ‚â° _)
-- --                         (whrDet* (red D‚Ä≤ , ne neM) (red D‚ÇÅ , ne neK‚ÇÅ))
-- --                         (sym (‚âÖ-eq (~-to-‚âÖ K‚â°M)))
-- --     in  ne‚Çú‚Çå k m (convRed:*: d K‚ÇÅ‚â°K) (convRed:*: d‚Ä≤ K‚ÇÅ‚â°K)
-- --                  (neNf‚Çú‚Çå neK‚ÇÇ neM‚ÇÅ (~-conv k‚â°m K‚ÇÅ‚â°K))
-- --   convEqTermT‚ÇÇ (ne (ne K D neK K‚â°K) (ne K‚ÇÅ D‚ÇÅ neK‚ÇÅ K‚â°K‚ÇÅ) (ne‚Çå M D‚Ä≤ neM K‚â°M))
-- --              (ne‚Çú‚Çå k m d d' (‚ä©neNfœù-l Œ±k [k'] tk‚â°k' fk‚â°k')) = {!!}
-- --   convEqTermT‚ÇÇ (ne (ne K D neK K‚â°K) (ne K‚ÇÅ D‚ÇÅ neK‚ÇÅ K‚â°K‚ÇÅ) (ne‚Çå M D‚Ä≤ neM K‚â°M))
-- --              (ne‚Çú‚Çå k m d d' (‚ä©neNfœù-r [k] Œ±k' tk‚â°k' fk‚â°k')) = {!!}
-- --   convEqTermT‚ÇÇ {Œì = Œì} {lŒµ = lŒµ} (B·µ• BŒ† (B·µ£ F G D ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext)
-- --                                         (B·µ£ F‚ÇÅ G‚ÇÅ D‚ÇÅ ‚ä¢F‚ÇÅ ‚ä¢G‚ÇÅ A‚â°A‚ÇÅ [F]‚ÇÅ [G]‚ÇÅ G-ext‚ÇÅ)
-- --                                         (B‚Çå F‚Ä≤ G‚Ä≤ D‚Ä≤ A‚â°B [F‚â°F‚Ä≤] [G‚â°G‚Ä≤]))
-- --                (Œ†‚Çú‚Çå f g d d‚Ä≤ funcF funcG t‚â°u [t] [u] [t‚â°u]) =
-- --     let [A] = B·µ£‚Ä≤ BŒ† F G D ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext
-- --         [B] = B·µ£‚Ä≤ BŒ† F‚ÇÅ G‚ÇÅ D‚ÇÅ ‚ä¢F‚ÇÅ ‚ä¢G‚ÇÅ A‚â°A‚ÇÅ [F]‚ÇÅ [G]‚ÇÅ G-ext‚ÇÅ
-- --         [A‚â°B] = ‚ä©¬π‚â°B _ _ (B‚Çå F‚Ä≤ G‚Ä≤ D‚Ä≤ A‚â°B [F‚â°F‚Ä≤] [G‚â°G‚Ä≤])
-- --         Œ†F‚ÇÅG‚ÇÅ‚â°Œ†F‚Ä≤G‚Ä≤ = whrDet* (red D‚ÇÅ , Œ†‚Çô) (D‚Ä≤ , Œ†‚Çô)
-- --         Œ†FG‚â°Œ†F‚ÇÅG‚ÇÅ = PE.subst (Œª x ‚Üí Œì  / lŒµ ‚ä¢ Œ† F ‚ñπ G ‚â° x)
-- --                              (PE.sym Œ†F‚ÇÅG‚ÇÅ‚â°Œ†F‚Ä≤G‚Ä≤) (‚âÖ-eq A‚â°B)
-- --     in  Œ†‚Çú‚Çå f g (convRed:*: d (sym Œ†FG‚â°Œ†F‚ÇÅG‚ÇÅ)) (convRed:*: d‚Ä≤ (sym Œ†FG‚â°Œ†F‚ÇÅG‚ÇÅ))
-- --             funcF funcG (‚âÖ-conv t‚â°u (sym Œ†FG‚â°Œ†F‚ÇÅG‚ÇÅ))
-- --             (convTerm‚ÇÇ [A] [B] [A‚â°B] [t]) (convTerm‚ÇÇ [A] [B] [A‚â°B] [u])
-- --             (Œª {_} {œÅ} {Œî : Con Term _} {a} {l' : LCon} {‚â§Œµ : _ ‚â§‚Çó l'} [œÅ] ‚ä¢Œî [a] ‚Üí
-- --                let F‚ÇÅ‚â°F‚Ä≤ , G‚ÇÅ‚â°G‚Ä≤ = B-PE-injectivity BŒ† (whrDet* (red D‚ÇÅ , Œ†‚Çô) (D‚Ä≤ , Œ†‚Çô))
-- --                    [F‚â°F‚ÇÅ] = irrelevanceEqR‚Ä≤ (PE.cong (wk œÅ) (PE.sym F‚ÇÅ‚â°F‚Ä≤))
-- --                                             ([F] [œÅ] ‚ä¢Œî) ([F‚â°F‚Ä≤] [œÅ] ‚ä¢Œî)
-- --                    [a]‚ÇÅ = convTerm‚ÇÅ ([F] [œÅ] ‚ä¢Œî) ([F]‚ÇÅ {‚â§Œµ = ‚â§Œµ} [œÅ] ‚ä¢Œî) [F‚â°F‚ÇÅ] [a]
-- --                    [G‚â°G‚ÇÅ] = irrelevanceEqR‚Ä≤ (PE.cong (Œª x ‚Üí wk (lift œÅ) x [ _ ])
-- --                                                      (PE.sym G‚ÇÅ‚â°G‚Ä≤))
-- --                                             ([G] [œÅ] ‚ä¢Œî [a])
-- --                                             ([G‚â°G‚Ä≤] [œÅ] ‚ä¢Œî [a])
-- --                in  convEqTerm‚ÇÇ ([G] [œÅ] ‚ä¢Œî [a]) ([G]‚ÇÅ [œÅ] ‚ä¢Œî [a]‚ÇÅ)
-- --                                [G‚â°G‚ÇÅ] ([t‚â°u] [œÅ] ‚ä¢Œî [a]‚ÇÅ))
-- --   convEqTermT‚ÇÇ {Œì = Œì} {lŒµ = lŒµ} (B·µ• BŒ£ (B·µ£ F G D ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext)
-- --                                         (B·µ£ F‚ÇÅ G‚ÇÅ D‚ÇÅ ‚ä¢F‚ÇÅ ‚ä¢G‚ÇÅ A‚â°A‚ÇÅ [F]‚ÇÅ [G]‚ÇÅ G-ext‚ÇÅ)
-- --                                         (B‚Çå F‚Ä≤ G‚Ä≤ D‚Ä≤ A‚â°B [F‚â°F‚Ä≤] [G‚â°G‚Ä≤]))
-- --                (Œ£‚Çú‚Çå p r d d‚Ä≤ funcF funcG t‚â°u [t] [u] [fstp]‚ÇÅ [fstr]‚ÇÅ [fst‚â°]‚ÇÅ [snd‚â°]‚ÇÅ) =
-- --     let [A] = B·µ£‚Ä≤ BŒ£ F G D ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext
-- --         [B] = B·µ£‚Ä≤ BŒ£ F‚ÇÅ G‚ÇÅ D‚ÇÅ ‚ä¢F‚ÇÅ ‚ä¢G‚ÇÅ A‚â°A‚ÇÅ (Œª {m} {l'} {‚â§Œµ} {lŒµ'} ‚Üí [F]‚ÇÅ {m} {l'} {‚â§Œµ} {lŒµ'}) [G]‚ÇÅ G-ext‚ÇÅ
-- --         [A‚â°B] = ‚ä©¬π‚â°B _ _ (B‚Çå F‚Ä≤ G‚Ä≤ D‚Ä≤ A‚â°B (Œª {m} {l'} {œÅ} {Œî} {‚â§Œµ} {lŒµ'} ‚Üí [F‚â°F‚Ä≤] {‚â§Œµ = ‚â§Œµ} {lŒµ'}) [G‚â°G‚Ä≤])
-- --         Œ£F‚ÇÅG‚ÇÅ‚â°Œ£F‚Ä≤G‚Ä≤ = whrDet* (red D‚ÇÅ , Œ£‚Çô) (D‚Ä≤ , Œ£‚Çô)
-- --         F‚ÇÅ‚â°F‚Ä≤ , G‚ÇÅ‚â°G‚Ä≤ = B-PE-injectivity BŒ£ Œ£F‚ÇÅG‚ÇÅ‚â°Œ£F‚Ä≤G‚Ä≤
-- --         Œ£FG‚â°Œ£F‚ÇÅG‚ÇÅ = PE.subst (Œª x ‚Üí Œì  / lŒµ ‚ä¢ Œ£ F ‚ñπ G ‚â° x)
-- --                              (PE.sym Œ£F‚ÇÅG‚ÇÅ‚â°Œ£F‚Ä≤G‚Ä≤) (‚âÖ-eq A‚â°B)
-- --         ‚ä¢Œì = wf ‚ä¢F
-- --         ‚ä¢Œì‚ÇÅ = wf ‚ä¢F‚ÇÅ
-- --         F‚â°F‚ÇÅ = PE.subst (Œª x ‚Üí Œì / lŒµ ‚ä©‚ü® _ ‚ü© wk id F ‚â° wk id x / [F] Wk.id ‚ä¢Œì)
-- --                         (PE.sym F‚ÇÅ‚â°F‚Ä≤)
-- --                         ([F‚â°F‚Ä≤] Wk.id ‚ä¢Œì)
-- --         [fstp] = convTerm‚ÇÇ ([F] Wk.id ‚ä¢Œì) ([F]‚ÇÅ Wk.id ‚ä¢Œì‚ÇÅ) F‚â°F‚ÇÅ [fstp]‚ÇÅ
-- --         [fstr] = convTerm‚ÇÇ ([F] Wk.id ‚ä¢Œì) ([F]‚ÇÅ Wk.id ‚ä¢Œì‚ÇÅ) F‚â°F‚ÇÅ [fstr]‚ÇÅ
-- --         [fst‚â°] = convEqTerm‚ÇÇ ([F] Wk.id ‚ä¢Œì) ([F]‚ÇÅ Wk.id ‚ä¢Œì‚ÇÅ) F‚â°F‚ÇÅ [fst‚â°]‚ÇÅ
-- --         G‚â°G‚ÇÅ = PE.subst (Œª x ‚Üí Œì / lŒµ ‚ä©‚ü® _ ‚ü© wk (lift id) G [ fst p ] ‚â° wk (lift id) x [ fst p ] / [G] Wk.id ‚ä¢Œì [fstp])
-- --                         (PE.sym G‚ÇÅ‚â°G‚Ä≤)
-- --                         ([G‚â°G‚Ä≤] Wk.id ‚ä¢Œì [fstp])
-- --         [snd‚â°] = convEqTerm‚ÇÇ ([G] Wk.id ‚ä¢Œì [fstp]) ([G]‚ÇÅ Wk.id ‚ä¢Œì‚ÇÅ [fstp]‚ÇÅ) G‚â°G‚ÇÅ [snd‚â°]‚ÇÅ
-- --     in  Œ£‚Çú‚Çå p r (convRed:*: d (sym Œ£FG‚â°Œ£F‚ÇÅG‚ÇÅ)) (convRed:*: d‚Ä≤ (sym Œ£FG‚â°Œ£F‚ÇÅG‚ÇÅ))
-- --             funcF funcG (‚âÖ-conv t‚â°u (sym Œ£FG‚â°Œ£F‚ÇÅG‚ÇÅ))
-- --             (convTerm‚ÇÇ [A] [B] [A‚â°B] [t]) (convTerm‚ÇÇ [A] [B] [A‚â°B] [u])
-- --             [fstp] [fstr] [fst‚â°] [snd‚â°]
-- --   convEqTermT‚ÇÇ (U·µ• (U·µ£ .‚Å∞ 0<1 ‚ä¢Œì) (U·µ£ .‚Å∞ 0<1 ‚ä¢Œì‚ÇÅ) A‚â°B) t‚â°u = t‚â°u
-- --   convEqTermT‚ÇÇ (emb‚Å∞¬π x) t‚â°u = {!!} -- convEqTermT‚ÇÇ x A‚â°B t‚â°u
-- --   convEqTermT‚ÇÇ (emb¬π‚Å∞ x) t‚â°u = {!!} -- convEqTermT‚ÇÇ x A‚â°B t‚â°u
-- --   convEqTermT‚ÇÇ (œù·µ£-l A‚áíA' Œ±A [B] [A]t [A]f [B]t [B]f tAB fAB tA‚â°B fA‚â°B) t‚â°u = {!!}
-- --   convEqTermT‚ÇÇ (œù·µ£-r B‚áíB' B‚áíB'' Œ±B Œ±B' [A] [A]t [A]f [B]t [B]f tAB fAB tA‚â°B fA‚â°B) t‚â°u = {!!}

-- --   -- Conversion of term equality converting from left to right.
-- --   convEqTerm‚ÇÅ : ‚àÄ {k k‚Ä≤ A B t u} ([A] : Œì / lŒµ ‚ä©‚ü® k ‚ü© A) ([B] : Œì / lŒµ ‚ä©‚ü® k‚Ä≤ ‚ü© B)
-- --               ‚Üí Œì / lŒµ ‚ä©‚ü® k ‚ü©  A ‚â° B / [A]
-- --               ‚Üí Œì / lŒµ ‚ä©‚ü® k ‚ü©  t ‚â° u ‚à∑ A / [A]
-- --               ‚Üí Œì / lŒµ ‚ä©‚ü® k‚Ä≤ ‚ü© t ‚â° u ‚à∑ B / [B]
-- --   convEqTerm‚ÇÅ [A] [B] A‚â°B t‚â°u = convEqTermT‚ÇÅ (goodCases [A] [B] A‚â°B) t‚â°u

-- --   -- Conversion of term equality converting from right to left.
-- --   convEqTerm‚ÇÇ : ‚àÄ {k k‚Ä≤ A B t u} ([A] : Œì / lŒµ ‚ä©‚ü® k ‚ü© A) ([B] : Œì / lŒµ ‚ä©‚ü® k‚Ä≤ ‚ü© B)
-- --             ‚Üí Œì / lŒµ ‚ä©‚ü® k ‚ü©  A ‚â° B / [A]
-- --             ‚Üí Œì / lŒµ ‚ä©‚ü® k‚Ä≤ ‚ü© t ‚â° u ‚à∑ B / [B]
-- --             ‚Üí Œì / lŒµ ‚ä©‚ü® k ‚ü©  t ‚â° u ‚à∑ A / [A]
-- --   convEqTerm‚ÇÇ [A] [B] A‚â°B t‚â°u = convEqTermT‚ÇÇ (goodCases [A] [B] A‚â°B) t‚â°u


